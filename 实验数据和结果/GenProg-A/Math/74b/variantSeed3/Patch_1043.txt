1 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.reinitialize(y,forward);
**************************************************
2 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
setInterpolationControl(true,-1);
**************************************************
3 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.reinitialize(y,forward);
**************************************************
4 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
interpolatorTmp.storeTime(stepEnd);
**************************************************
5 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
lastStep=manager.stop();
**************************************************
6 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
final double[] scale=new double[y0.length];
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
8 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
setMaxGrowth(10.0);
**************************************************
9 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
stepSize=Double.NaN;
**************************************************
10 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
stepSize=t - stepStart;
**************************************************
11 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] yTmpDot=new double[y0.length];
**************************************************
12 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
interpolatorTmp.storeTime(stepEnd);
**************************************************
13 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
lastStep=manager.stop();
**************************************************
14 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
final double[] scale=new double[y0.length];
**************************************************
15 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
16 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
setMaxGrowth(10.0);
**************************************************
17 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
stepSize=Double.NaN;
**************************************************
18 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
this.initialStep=-1.0;
**************************************************
19 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 264
Faulty:
predictedScaled[j]=stepSize * yDot[j];
Seed:
final double[] predictedScaled=new double[y0.length];
**************************************************
20 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
final double dt=eventsHandlersManager.getEventTime() - stepStart;
**************************************************
21 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double tol=(vecRelativeTolerance == null) ? scalRelativeTolerance : vecRelativeTolerance[0];
**************************************************
22 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
final double dt=eventsHandlersManager.getEventTime() - stepStart;
**************************************************
23 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 255
Faulty:
interpolator.setInterpolatedTime(stepEnd);
Seed:
boolean lastStep=false;
**************************************************
24 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
interpolator.storeTime(stepStart + stepSize);
**************************************************
25 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.reinitialize(y,forward);
**************************************************
26 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
interpolatorTmp.storeTime(stepEnd);
**************************************************
27 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
lastStep=manager.stop();
**************************************************
28 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
final double[] scale=new double[y0.length];
**************************************************
29 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
30 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
setMaxGrowth(10.0);
**************************************************
31 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
stepSize=Double.NaN;
**************************************************
32 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
stepSize=t - stepStart;
**************************************************
33 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] yTmpDot=new double[y0.length];
**************************************************
34 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
return false;
**************************************************
35 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
36 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
if (error <= 1.0) {
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  interpolatorTmp.reinitialize(stepEnd,stepSize,predictedScaled,nordsieckTmp);
  interpolatorTmp.storeTime(stepStart);
  interpolatorTmp.shift();
  interpolatorTmp.storeTime(stepEnd);
  if (manager.evaluateStep(interpolatorTmp)) {
    final double dt=manager.getEventTime() - stepStart;
    if (Math.abs(dt) <= Math.ulp(stepStart)) {
      loop=false;
    }
 else {
      hNew=dt;
      interpolator.rescale(hNew);
    }
  }
 else {
    scaled=predictedScaled;
    nordsieck=nordsieckTmp;
    interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
    loop=false;
  }
}
 else {
  final double factor=computeStepGrowShrinkFactor(error);
  hNew=filterStep(stepSize * factor,forward,false);
  interpolator.rescale(hNew);
}
**************************************************
37 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 359
Faulty:
return stopTime;
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
38 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
final double[] scale=new double[y0.length];
**************************************************
39 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
40 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
setMaxGrowth(10.0);
**************************************************
41 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
stepSize=Double.NaN;
**************************************************
42 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
this.initialStep=-1.0;
**************************************************
43 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 264
Faulty:
predictedScaled[j]=stepSize * yDot[j];
Seed:
final double[] predictedScaled=new double[y0.length];
**************************************************
44 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
final double dt=eventsHandlersManager.getEventTime() - stepStart;
**************************************************
45 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double tol=(vecRelativeTolerance == null) ? scalRelativeTolerance : vecRelativeTolerance[0];
**************************************************
46 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
final double dt=eventsHandlersManager.getEventTime() - stepStart;
**************************************************
47 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 255
Faulty:
interpolator.setInterpolatedTime(stepEnd);
Seed:
boolean lastStep=false;
**************************************************
48 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
interpolator.storeTime(stepStart + stepSize);
**************************************************
49 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.reinitialize(y,forward);
**************************************************
50 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
interpolatorTmp.storeTime(stepEnd);
**************************************************
51 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
lastStep=manager.stop();
**************************************************
52 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 263
Faulty:
for (int j=0; j < y0.length; ++j) {
  predictedScaled[j]=stepSize * yDot[j];
}
Seed:
stepSize=t - stepStart;
**************************************************
53 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
lastStep=manager.stop();
**************************************************
54 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
final double[] scale=new double[y0.length];
**************************************************
55 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
56 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
setMaxGrowth(10.0);
**************************************************
57 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
stepSize=Double.NaN;
**************************************************
58 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
stepSize=t - stepStart;
**************************************************
59 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] yTmpDot=new double[y0.length];
**************************************************
60 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
return false;
**************************************************
61 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
62 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
if (error <= 1.0) {
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  interpolatorTmp.reinitialize(stepEnd,stepSize,predictedScaled,nordsieckTmp);
  interpolatorTmp.storeTime(stepStart);
  interpolatorTmp.shift();
  interpolatorTmp.storeTime(stepEnd);
  if (manager.evaluateStep(interpolatorTmp)) {
    final double dt=manager.getEventTime() - stepStart;
    if (Math.abs(dt) <= Math.ulp(stepStart)) {
      loop=false;
    }
 else {
      hNew=dt;
      interpolator.rescale(hNew);
    }
  }
 else {
    scaled=predictedScaled;
    nordsieck=nordsieckTmp;
    interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
    loop=false;
  }
}
 else {
  final double factor=computeStepGrowShrinkFactor(error);
  hNew=filterStep(stepSize * factor,forward,false);
  interpolator.rescale(hNew);
}
**************************************************
63 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 359
Faulty:
return stopTime;
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
64 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 262
Faulty:
final double[] predictedScaled=new double[y0.length];
Seed:
return new GillStepInterpolator(this);
**************************************************
65 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 359
Faulty:
return stopTime;
Seed:
if (!forward) {
  hNew=-hNew;
}
**************************************************
66 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
return 5;
**************************************************
67 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
68 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] yDot0=new double[y0.length];
**************************************************
69 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
final double tol=(vecRelativeTolerance == null) ? scalRelativeTolerance : vecRelativeTolerance[0];
**************************************************
70 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 291
Faulty:
if (Math.abs(dt) <= Math.ulp(stepStart)) {
  loop=false;
}
 else {
  hNew=dt;
  interpolator.rescale(hNew);
}
Seed:
return stepStart;
**************************************************
71 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 282
Faulty:
updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
Seed:
final double[] yDot=new double[n];
**************************************************
72 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 263
Faulty:
for (int j=0; j < y0.length; ++j) {
  predictedScaled[j]=stepSize * yDot[j];
}
Seed:
setMaxGrowth(10.0);
**************************************************
73 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 297
Faulty:
interpolator.rescale(hNew);
Seed:
return new MidpointStepInterpolator(this);
**************************************************
74 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 246
Faulty:
interpolator.shift();
Seed:
double[] yDot1=null;
**************************************************
75 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 246
Faulty:
interpolator.shift();
Seed:
System.arraycopy(yTmp,0,y,0,n);
**************************************************
76 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 263
Faulty:
for (int j=0; j < y0.length; ++j) {
  predictedScaled[j]=stepSize * yDot[j];
}
Seed:
final double[] correctedScaled=new double[y0.length];
**************************************************
77 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 246
Faulty:
interpolator.shift();
Seed:
interpolatorTmp.reinitialize(yTmp,forward);
**************************************************
Evaluations: 1571
EstimatedTime: 951181
