1 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
3 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
error=Math.sqrt(error / y0.length);
**************************************************
4 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] y1=new double[y0.length];
**************************************************
5 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
6 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
8 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
9 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
10 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
11 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
setEquations(equations);
**************************************************
12 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
13 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
14 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
15 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
double hNew=0;
**************************************************
16 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
17 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
18 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
19 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
20 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
21 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
22 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
23 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
24 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
25 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
26 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
27 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
double error2=0;
**************************************************
28 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
this.vecAbsoluteTolerance=null;
**************************************************
29 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
30 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
resetEvaluations();
**************************************************
31 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
32 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
33 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
34 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
35 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
36 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
37 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
38 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
39 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
40 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
setSafety(0.9);
**************************************************
41 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,n);
}
**************************************************
42 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 262
Faulty:
final double[] predictedScaled=new double[y0.length];
Seed:
stepSize=filterStep(stepSize,forward,true);
**************************************************
43 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
lastStep=false;
**************************************************
44 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double factor=computeStepGrowShrinkFactor(error);
**************************************************
45 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
46 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.rescale(hNew);
**************************************************
47 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 296
Faulty:
hNew=dt;
Seed:
lastStep=false;
**************************************************
48 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
49 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
50 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
resetInternalState();
**************************************************
51 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 267
Faulty:
updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
Seed:
loop=false;
**************************************************
52 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
53 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
interpolatorTmp.reinitialize(yTmp,forward);
**************************************************
54 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return maxStep;
**************************************************
55 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
double[] yDot1=null;
**************************************************
56 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
57 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 237
Faulty:
interpolator.storeTime(stepStart);
Seed:
setMaxGrowth(10.0);
**************************************************
58 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
59 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
60 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
61 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
62 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
63 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
error=Math.sqrt(error / y0.length);
**************************************************
64 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] y1=new double[y0.length];
**************************************************
65 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
66 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
67 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
68 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
69 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
70 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
71 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
setEquations(equations);
**************************************************
72 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
73 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
74 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 237
Faulty:
interpolator.storeTime(stepStart);
Seed:
setMaxGrowth(10.0);
**************************************************
75 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
76 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double factor=computeStepGrowShrinkFactor(error);
**************************************************
77 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
78 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
double hNew=0;
**************************************************
79 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
80 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
81 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
double error2=0;
**************************************************
82 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
this.vecAbsoluteTolerance=null;
**************************************************
83 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
84 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.rescale(hNew);
**************************************************
85 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 296
Faulty:
hNew=dt;
Seed:
lastStep=false;
**************************************************
86 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
87 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
88 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
89 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
double hNew=0;
**************************************************
90 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
91 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
92 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
93 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
94 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
95 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
96 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
97 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
98 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
99 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
100 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
101 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
double error2=0;
**************************************************
102 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
this.vecAbsoluteTolerance=null;
**************************************************
103 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
104 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
resetEvaluations();
**************************************************
105 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
106 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
107 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
108 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
109 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
110 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
111 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
112 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
113 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
114 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
setSafety(0.9);
**************************************************
115 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,n);
}
**************************************************
116 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 262
Faulty:
final double[] predictedScaled=new double[y0.length];
Seed:
stepSize=filterStep(stepSize,forward,true);
**************************************************
117 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
lastStep=false;
**************************************************
118 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double factor=computeStepGrowShrinkFactor(error);
**************************************************
119 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
120 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.rescale(hNew);
**************************************************
121 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 296
Faulty:
hNew=dt;
Seed:
lastStep=false;
**************************************************
122 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
123 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
124 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
resetInternalState();
**************************************************
125 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 267
Faulty:
updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
Seed:
loop=false;
**************************************************
126 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
127 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
interpolatorTmp.reinitialize(yTmp,forward);
**************************************************
128 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return maxStep;
**************************************************
129 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
double[] yDot1=null;
**************************************************
130 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
131 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 237
Faulty:
interpolator.storeTime(stepStart);
Seed:
setMaxGrowth(10.0);
**************************************************
132 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 297
Faulty:
interpolator.rescale(hNew);
Seed:
resetTables(-1);
**************************************************
133 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 254
Faulty:
final double stepEnd=stepStart + stepSize;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
134 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 254
Faulty:
final double stepEnd=stepStart + stepSize;
Seed:
int k=-1;
**************************************************
135 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
double yDDotOnScale=0;
**************************************************
136 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
throw new IntegratorException("dimensions mismatch: state vector has dimension {0}," + " relative tolerance vector has dimension {1}",y0.length,vecRelativeTolerance.length);
**************************************************
137 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
138 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
139 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final NordsieckStepInterpolator interpolator=new NordsieckStepInterpolator();
**************************************************
140 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
**************************************************
141 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 296
Faulty:
hNew=dt;
Seed:
return;
**************************************************
142 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
setMaxGrowth(10.0);
**************************************************
143 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 285
Faulty:
interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
Seed:
interpolator.shift();
**************************************************
Evaluations: 1566
EstimatedTime: 1092697
