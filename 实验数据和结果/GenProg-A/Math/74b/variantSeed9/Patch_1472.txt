1 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
3 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
error=Math.sqrt(error / y0.length);
**************************************************
4 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] y1=new double[y0.length];
**************************************************
5 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
6 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
8 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
9 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
10 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
11 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
setEquations(equations);
**************************************************
12 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
13 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
14 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
15 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
double hNew=0;
**************************************************
16 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
17 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
18 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
19 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
20 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
21 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
22 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
23 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
24 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
25 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
26 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
27 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
double error2=0;
**************************************************
28 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
this.vecAbsoluteTolerance=null;
**************************************************
29 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
30 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
resetEvaluations();
**************************************************
31 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
32 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
33 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
34 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
35 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
36 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
37 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
38 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
39 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
40 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
double hNew=0;
**************************************************
41 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
42 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
43 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
44 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
45 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
46 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
47 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
48 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
49 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
50 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
setEquations(equations);
**************************************************
51 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
52 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
error=Math.sqrt(error / y0.length);
**************************************************
53 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
final double[] y1=new double[y0.length];
**************************************************
54 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
55 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
56 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
57 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
58 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
59 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
**************************************************
60 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
61 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
62 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
63 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
setEquations(equations);
**************************************************
64 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
double yDotOnScale2=0;
**************************************************
65 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
66 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
67 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 266
Faulty:
final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
Seed:
double hNew=0;
**************************************************
68 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
69 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
70 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
71 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
72 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
73 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
74 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
75 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
76 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
77 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
78 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
79 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
double error2=0;
**************************************************
80 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
this.vecAbsoluteTolerance=null;
**************************************************
81 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
82 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
resetEvaluations();
**************************************************
83 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
84 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
85 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
86 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
87 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
88 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
89 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
90 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
91 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
92 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
setSafety(0.9);
**************************************************
93 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,n);
}
**************************************************
94 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 262
Faulty:
final double[] predictedScaled=new double[y0.length];
Seed:
stepSize=filterStep(stepSize,forward,true);
**************************************************
95 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
lastStep=false;
**************************************************
96 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double factor=computeStepGrowShrinkFactor(error);
**************************************************
97 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
98 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.rescale(hNew);
**************************************************
99 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 296
Faulty:
hNew=dt;
Seed:
lastStep=false;
**************************************************
100 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
101 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
102 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 263
Faulty:
for (int j=0; j < y0.length; ++j) {
  predictedScaled[j]=stepSize * yDot[j];
}
Seed:
lastStep=true;
**************************************************
103 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
104 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 236
Faulty:
interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
105 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 272
Faulty:
if (error <= 1.0) {
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] correctedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    correctedScaled[j]=stepSize * yDot[j];
  }
  updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
  interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
  interpolatorTmp.storeTime(stepStart);
  interpolatorTmp.shift();
  interpolatorTmp.storeTime(stepEnd);
  if (manager.evaluateStep(interpolatorTmp)) {
    final double dt=manager.getEventTime() - stepStart;
    if (Math.abs(dt) <= Math.ulp(stepStart)) {
      loop=false;
    }
 else {
      hNew=dt;
      interpolator.rescale(hNew);
    }
  }
 else {
    scaled=correctedScaled;
    nordsieck=nordsieckTmp;
    interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
    loop=false;
  }
}
 else {
  final double factor=computeStepGrowShrinkFactor(error);
  hNew=filterStep(stepSize * factor,forward,false);
  interpolator.rescale(hNew);
}
Seed:
interpolatorTmp.storeTime(stepStart);
**************************************************
106 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.storeTime(stepStart);
**************************************************
107 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
return Math.sqrt(error / y0.length);
**************************************************
108 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
double error2=0;
**************************************************
109 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
this.vecAbsoluteTolerance=null;
**************************************************
110 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
final GraggBulirschStoerStepInterpolator gbsInterpolator=(GraggBulirschStoerStepInterpolator)interpolator;
**************************************************
111 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
resetEvaluations();
**************************************************
112 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
113 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 248
Faulty:
double error=0;
Seed:
setInterpolationControl(true,-1);
**************************************************
114 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 249
Faulty:
for (boolean loop=true; loop; ) {
  stepSize=hNew;
  final double stepEnd=stepStart + stepSize;
  interpolator.setInterpolatedTime(stepEnd);
  System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
  computeDerivatives(stepEnd,yTmp,yDot);
  final double[] predictedScaled=new double[y0.length];
  for (int j=0; j < y0.length; ++j) {
    predictedScaled[j]=stepSize * yDot[j];
  }
  final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
  updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
  error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
  if (error <= 1.0) {
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] correctedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      correctedScaled[j]=stepSize * yDot[j];
    }
    updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
    interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
    interpolatorTmp.storeTime(stepStart);
    interpolatorTmp.shift();
    interpolatorTmp.storeTime(stepEnd);
    if (manager.evaluateStep(interpolatorTmp)) {
      final double dt=manager.getEventTime() - stepStart;
      if (Math.abs(dt) <= Math.ulp(stepStart)) {
        loop=false;
      }
 else {
        hNew=dt;
        interpolator.rescale(hNew);
      }
    }
 else {
      scaled=correctedScaled;
      nordsieck=nordsieckTmp;
      interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
      loop=false;
    }
  }
 else {
    final double factor=computeStepGrowShrinkFactor(error);
    hNew=filterStep(stepSize * factor,forward,false);
    interpolator.rescale(hNew);
  }
}
Seed:
interpolator=new DummyStepInterpolator(yTmp,forward);
**************************************************
115 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
final double nextT=stepStart + stepSize;
**************************************************
116 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 240
Faulty:
interpolator.rescale(hNew);
Seed:
for (StepHandler handler : stepHandlers) {
  handler.reset();
}
**************************************************
117 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return forward ? initialStep : -initialStep;
**************************************************
118 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 311
Faulty:
interpolator.rescale(hNew);
Seed:
interpolator.reinitialize(y,forward);
**************************************************
119 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
super.sanityChecks(equations,t0,y0,t,y);
**************************************************
120 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
resetEvaluations();
**************************************************
121 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
setSafety(0.9);
**************************************************
122 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 239
Faulty:
double hNew=stepSize;
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,n);
}
**************************************************
123 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 262
Faulty:
final double[] predictedScaled=new double[y0.length];
Seed:
stepSize=filterStep(stepSize,forward,true);
**************************************************
124 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
lastStep=false;
**************************************************
125 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double factor=computeStepGrowShrinkFactor(error);
**************************************************
126 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 243
Faulty:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,y0.length);
}
**************************************************
127 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 357
Faulty:
stepStart=Double.NaN;
Seed:
interpolator.rescale(hNew);
**************************************************
128 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 296
Faulty:
hNew=dt;
Seed:
lastStep=false;
**************************************************
129 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 310
Faulty:
hNew=filterStep(stepSize * factor,forward,false);
Seed:
System.arraycopy(yTmp,0,y,0,y0.length);
**************************************************
130 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
131 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
resetInternalState();
**************************************************
132 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 267
Faulty:
updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
Seed:
loop=false;
**************************************************
133 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
System.arraycopy(y0,0,y,0,y0.length);
**************************************************
134 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 309
Faulty:
final double factor=computeStepGrowShrinkFactor(error);
Seed:
interpolatorTmp.reinitialize(yTmp,forward);
**************************************************
135 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java 292
Faulty:
filteredH=maxStep;
Seed:
return maxStep;
**************************************************
136 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 251
Faulty:
stepSize=hNew;
Seed:
double[] yDot1=null;
**************************************************
137 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final NordsieckStepInterpolator interpolatorTmp=new NordsieckStepInterpolator();
**************************************************
138 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 237
Faulty:
interpolator.storeTime(stepStart);
Seed:
setMaxGrowth(10.0);
**************************************************
139 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 297
Faulty:
interpolator.rescale(hNew);
Seed:
resetTables(-1);
**************************************************
140 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 254
Faulty:
final double stepEnd=stepStart + stepSize;
Seed:
while (!lastStep) {
  interpolator.shift();
  double error=0;
  for (boolean loop=true; loop; ) {
    stepSize=hNew;
    final double stepEnd=stepStart + stepSize;
    interpolator.setInterpolatedTime(stepEnd);
    System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
    computeDerivatives(stepEnd,yTmp,yDot);
    final double[] predictedScaled=new double[y0.length];
    for (int j=0; j < y0.length; ++j) {
      predictedScaled[j]=stepSize * yDot[j];
    }
    final Array2DRowRealMatrix nordsieckTmp=updateHighOrderDerivativesPhase1(nordsieck);
    updateHighOrderDerivativesPhase2(scaled,predictedScaled,nordsieckTmp);
    error=nordsieckTmp.walkInOptimizedOrder(new Corrector(y,predictedScaled,yTmp));
    if (error <= 1.0) {
      computeDerivatives(stepEnd,yTmp,yDot);
      final double[] correctedScaled=new double[y0.length];
      for (int j=0; j < y0.length; ++j) {
        correctedScaled[j]=stepSize * yDot[j];
      }
      updateHighOrderDerivativesPhase2(predictedScaled,correctedScaled,nordsieckTmp);
      interpolatorTmp.reinitialize(stepEnd,stepSize,correctedScaled,nordsieckTmp);
      interpolatorTmp.storeTime(stepStart);
      interpolatorTmp.shift();
      interpolatorTmp.storeTime(stepEnd);
      if (manager.evaluateStep(interpolatorTmp)) {
        final double dt=manager.getEventTime() - stepStart;
        if (Math.abs(dt) <= Math.ulp(stepStart)) {
          loop=false;
        }
 else {
          hNew=dt;
          interpolator.rescale(hNew);
        }
      }
 else {
        scaled=correctedScaled;
        nordsieck=nordsieckTmp;
        interpolator.reinitialize(stepEnd,stepSize,scaled,nordsieck);
        loop=false;
      }
    }
 else {
      final double factor=computeStepGrowShrinkFactor(error);
      hNew=filterStep(stepSize * factor,forward,false);
      interpolator.rescale(hNew);
    }
  }
  final double nextStep=stepStart + stepSize;
  System.arraycopy(yTmp,0,y,0,n);
  interpolator.storeTime(nextStep);
  manager.stepAccepted(nextStep,y);
  lastStep=manager.stop();
  for (  StepHandler handler : stepHandlers) {
    interpolator.setInterpolatedTime(nextStep);
    handler.handleStep(interpolator,lastStep);
  }
  stepStart=nextStep;
  if (!lastStep && manager.reset(stepStart,y)) {
    start(stepStart,y,t);
    interpolator.reinitialize(stepStart,stepSize,scaled,nordsieck);
  }
  if (!lastStep) {
    stepSize=filterStep(stepSize,forward,true);
    final double factor=computeStepGrowShrinkFactor(error);
    final double scaledH=stepSize * factor;
    final double nextT=stepStart + scaledH;
    final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
    hNew=filterStep(scaledH,forward,nextIsLast);
    interpolator.rescale(hNew);
  }
}
**************************************************
141 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 254
Faulty:
final double stepEnd=stepStart + stepSize;
Seed:
int k=-1;
**************************************************
142 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 259
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
double yDDotOnScale=0;
**************************************************
143 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 255
Faulty:
interpolator.setInterpolatedTime(stepEnd);
Seed:
boolean previousRejected=false;
**************************************************
144 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 278
Faulty:
final double[] correctedScaled=new double[y0.length];
Seed:
final double[] yDot0=new double[y0.length];
**************************************************
145 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 279
Faulty:
for (int j=0; j < y0.length; ++j) {
  correctedScaled[j]=stepSize * yDot[j];
}
Seed:
final double[] correctedScaled=new double[y0.length];
**************************************************
146 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 256
Faulty:
System.arraycopy(interpolator.getInterpolatedState(),0,yTmp,0,y0.length);
Seed:
final double dt=eventsHandlersManager.getEventTime() - stepStart;
**************************************************
147 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 290
Faulty:
final double dt=manager.getEventTime() - stepStart;
Seed:
final double[] y1=new double[y0.length];
**************************************************
148 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 297
Faulty:
interpolator.rescale(hNew);
Seed:
if (manager.evaluateStep(interpolator)) {
  final double dt=manager.getEventTime() - stepStart;
  if (Math.abs(dt) <= Math.ulp(stepStart)) {
    loop=false;
  }
 else {
    stepSize=dt;
  }
}
 else {
  loop=false;
}
**************************************************
149 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 254
Faulty:
final double stepEnd=stepStart + stepSize;
Seed:
setSafety(0.9);
**************************************************
150 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 275
Faulty:
computeDerivatives(stepEnd,yTmp,yDot);
Seed:
nordsieck=nordsieckTmp;
**************************************************
151 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
final double stepEnd=stepStart + stepSize;
**************************************************
152 Replace /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 262
Faulty:
final double[] predictedScaled=new double[y0.length];
Seed:
if (y != y0) {
  System.arraycopy(y0,0,y,0,n);
}
**************************************************
153 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 263
Faulty:
for (int j=0; j < y0.length; ++j) {
  predictedScaled[j]=stepSize * yDot[j];
}
Seed:
setMinReduction(0.2);
**************************************************
154 InsertBefore /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 358
Faulty:
stepSize=Double.NaN;
Seed:
this.scaled=scaled;
**************************************************
155 Delete /home/rtx/repair/d4j/Math/74b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java 286
Faulty:
interpolatorTmp.storeTime(stepStart);
Seed:
interpolator.storeTime(t0);
**************************************************
Evaluations: 1800
EstimatedTime: 1214183
