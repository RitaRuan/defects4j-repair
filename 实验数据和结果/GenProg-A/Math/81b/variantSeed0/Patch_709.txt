1 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1544
Faulty:
b2=work[nn - 13] / work[nn - 15];
Seed:
int outBlockIndex=0;
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
int k=0;
**************************************************
3 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1479
Faulty:
gam=dN;
Seed:
int dimension=0;
**************************************************
4 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
return walkInColumnOrder(new RealMatrixPreservingVisitor(){
  /** 
 * Last row index. 
 */
  private double endRow;
  /** 
 * Sum of absolute values on one column. 
 */
  private double columnSum;
  /** 
 * Maximal sum across all columns. 
 */
  private double maxColSum;
  /** 
 * {@inheritDoc} 
 */
  public void start(  final int rows,  final int columns,  final int startRow,  final int endRow,  final int startColumn,  final int endColumn){
    this.endRow=endRow;
    columnSum=0;
    maxColSum=0;
  }
  /** 
 * {@inheritDoc} 
 */
  public void visit(  final int row,  final int column,  final double value){
    columnSum+=Math.abs(value);
    if (row == endRow) {
      maxColSum=Math.max(maxColSum,columnSum);
      columnSum=0;
    }
  }
  /** 
 * {@inheritDoc} 
 */
  public double end(){
    return maxColSum;
  }
}
);
**************************************************
5 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
double sum=0;
**************************************************
6 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
return walkInColumnOrder(new RealMatrixPreservingVisitor(){
  /** 
 * Last row index. 
 */
  private double endRow;
  /** 
 * Sum of absolute values on one column. 
 */
  private double columnSum;
  /** 
 * Maximal sum across all columns. 
 */
  private double maxColSum;
  /** 
 * {@inheritDoc} 
 */
  public void start(  final int rows,  final int columns,  final int startRow,  final int endRow,  final int startColumn,  final int endColumn){
    this.endRow=endRow;
    columnSum=0;
    maxColSum=0;
  }
  /** 
 * {@inheritDoc} 
 */
  public void visit(  final int row,  final int column,  final double value){
    columnSum+=Math.abs(value);
    if (row == endRow) {
      maxColSum=Math.max(maxColSum,columnSum);
      columnSum=0;
    }
  }
  /** 
 * {@inheritDoc} 
 */
  public double end(){
    return maxColSum;
  }
}
);
**************************************************
7 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
**************************************************
8 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
double sum=0;
**************************************************
9 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
return walkInColumnOrder(new RealMatrixPreservingVisitor(){
  /** 
 * Last row index. 
 */
  private double endRow;
  /** 
 * Sum of absolute values on one column. 
 */
  private double columnSum;
  /** 
 * Maximal sum across all columns. 
 */
  private double maxColSum;
  /** 
 * {@inheritDoc} 
 */
  public void start(  final int rows,  final int columns,  final int startRow,  final int endRow,  final int startColumn,  final int endColumn){
    this.endRow=endRow;
    columnSum=0;
    maxColSum=0;
  }
  /** 
 * {@inheritDoc} 
 */
  public void visit(  final int row,  final int column,  final double value){
    columnSum+=Math.abs(value);
    if (row == endRow) {
      maxColSum=Math.max(maxColSum,columnSum);
      columnSum=0;
    }
  }
  /** 
 * {@inheritDoc} 
 */
  public double end(){
    return maxColSum;
  }
}
);
**************************************************
10 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
double sum=0;
**************************************************
11 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
np=nn - 2 * pingPong;
**************************************************
12 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1475
Faulty:
double s=0.25 * dMin;
Seed:
dMin2=0;
**************************************************
13 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1481
Faulty:
if (work[nn - 5] > work[nn - 7]) {
  return;
}
Seed:
if (a2 < cnst1) {
  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
 else {
  tau=s;
}
**************************************************
14 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1537
Faulty:
if (work[np - 8] > b2 || work[np - 4] > b1) {
  return;
}
Seed:
int outBlockIndex=0;
**************************************************
15 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1100
Faulty:
tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
Seed:
double xNormSqr=0;
**************************************************
16 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
tType-=11;
**************************************************
17 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
return copy().mapFloorToSelf();
**************************************************
18 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1540
Faulty:
double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);
Seed:
double absDCurrent=Math.abs(main[0]);
**************************************************
Evaluations: 964
EstimatedTime: 341271
