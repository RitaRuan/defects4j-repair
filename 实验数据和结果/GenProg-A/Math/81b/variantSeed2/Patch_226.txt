1 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1535
Faulty:
double b2=work[np - 6];
Seed:
double xNormSqr=0;
**************************************************
2 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
upperSpectra=Double.NEGATIVE_INFINITY;
**************************************************
3 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1480
Faulty:
a2=0.0;
Seed:
gam=dN;
**************************************************
4 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1479
Faulty:
gam=dN;
Seed:
StringBuffer res=new StringBuffer();
**************************************************
5 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1544
Faulty:
b2=work[nn - 13] / work[nn - 15];
Seed:
for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
  if (work[i4] > work[i4 - 2]) {
    return;
  }
  b1*=work[i4] / work[i4 - 2];
  b2+=b1;
  if (100 * b1 < b2) {
    break;
  }
}
**************************************************
6 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
g=0.0;
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1093
Faulty:
if (dMin < 0.0) {
  if (tType < -22) {
    tau=0.0;
  }
 else   if (dMin1 > 0.0) {
    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
    tType-=11;
  }
 else {
    tau*=0.25;
    tType-=12;
  }
}
 else if (Double.isNaN(dMin)) {
  tau=0.0;
}
 else {
  loop=false;
}
Seed:
int h=3542;
**************************************************
Evaluations: 303
EstimatedTime: 97873
