1 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
3 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double alpha=0;
**************************************************
4 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
5 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
6 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
7 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1509
Faulty:
return;
Seed:
work=new double[6 * main.length];
**************************************************
8 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
9 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
b1*=work[i4] / work[i4 - 2];
**************************************************
10 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
int h=3542;
**************************************************
11 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
if (tType == -6) {
  g+=0.333 * (1 - g);
}
 else if (tType == -18) {
  g=0.25 * 0.333;
}
 else {
  g=0.25;
}
**************************************************
12 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
dMin=Math.min(dMin,dN);
**************************************************
13 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1544
Faulty:
b2=work[nn - 13] / work[nn - 15];
Seed:
final int lowerStart=4 * main.length;
**************************************************
14 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
15 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1529
Faulty:
tType=-5;
Seed:
return cachedV;
**************************************************
16 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double lower=Double.POSITIVE_INFINITY;
**************************************************
17 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
18 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
19 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double lower=Double.POSITIVE_INFINITY;
**************************************************
20 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
21 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
22 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double alpha=0;
**************************************************
23 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double lower=Double.POSITIVE_INFINITY;
**************************************************
24 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
25 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
26 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double alpha=0;
**************************************************
27 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
28 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
29 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
30 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1509
Faulty:
return;
Seed:
work=new double[6 * main.length];
**************************************************
31 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
32 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
33 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
34 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
35 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1503
Faulty:
for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {
  if (b2 == 0.0) {
    break;
  }
  b1=b2;
  if (work[i4] > work[i4 - 2]) {
    return;
  }
  b2=b2 * (work[i4] / work[i4 - 2]);
  a2=a2 + b2;
  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
    break;
  }
}
Seed:
tau=0.0;
**************************************************
36 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1485
Faulty:
np=nn - 9;
Seed:
dMin=Math.min(dMin,dN1);
**************************************************
37 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1621
Faulty:
tau=0.25 * dMin1;
Seed:
dN2=0;
**************************************************
38 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
39 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1621
Faulty:
tau=0.25 * dMin1;
Seed:
dN2=0;
**************************************************
40 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1084
Faulty:
if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {
  work[4 * deflatedEnd - 3 - pingPong]=0.0;
  dMin=0.0;
  updateSigma(tau);
  return deflatedEnd;
}
 else if (dMin < 0.0) {
  if (tType < -22) {
    tau=0.0;
  }
 else   if (dMin1 > 0.0) {
    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
    tType-=11;
  }
 else {
    tau*=0.25;
    tType-=12;
  }
}
 else if (Double.isNaN(dMin)) {
  tau=0.0;
}
 else {
  loop=false;
}
Seed:
squaredSecondary=new double[secondary.length];
**************************************************
41 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
if (tType == -6) {
  g+=0.333 * (1 - g);
}
 else if (tType == -18) {
  g=0.25 * 0.333;
}
 else {
  g=0.25;
}
**************************************************
42 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
dMin=Math.min(dMin,dN);
**************************************************
43 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1544
Faulty:
b2=work[nn - 13] / work[nn - 15];
Seed:
final int lowerStart=4 * main.length;
**************************************************
44 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
45 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1529
Faulty:
tType=-5;
Seed:
return cachedV;
**************************************************
46 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double lower=Double.POSITIVE_INFINITY;
**************************************************
47 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
48 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
49 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double lower=Double.POSITIVE_INFINITY;
**************************************************
50 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
51 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
52 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double alpha=0;
**************************************************
53 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double lower=Double.POSITIVE_INFINITY;
**************************************************
54 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
updateSigma(tau);
**************************************************
55 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.eigenvectors=eigenvectors;
**************************************************
56 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
double alpha=0;
**************************************************
57 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
58 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
59 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
60 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1509
Faulty:
return;
Seed:
work=new double[6 * main.length];
**************************************************
61 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
62 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
63 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1095
Faulty:
if (tType < -22) {
  tau=0.0;
}
 else if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
dN=0;
**************************************************
64 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1511
Faulty:
b2=b2 * (work[i4] / work[i4 - 2]);
Seed:
throw new MatrixIndexException("empty selected row index array");
**************************************************
65 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1503
Faulty:
for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {
  if (b2 == 0.0) {
    break;
  }
  b1=b2;
  if (work[i4] > work[i4 - 2]) {
    return;
  }
  b2=b2 * (work[i4] / work[i4 - 2]);
  a2=a2 + b2;
  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
    break;
  }
}
Seed:
tau=0.0;
**************************************************
66 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1485
Faulty:
np=nn - 9;
Seed:
dMin=Math.min(dMin,dN1);
**************************************************
67 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1621
Faulty:
tau=0.25 * dMin1;
Seed:
dN2=0;
**************************************************
68 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1513
Faulty:
if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
  break;
}
Seed:
throw new SingularMatrixException();
**************************************************
69 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1480
Faulty:
a2=0.0;
Seed:
np=nn - 9;
**************************************************
70 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1502
Faulty:
a2=a2 + b2;
Seed:
tType=-8;
**************************************************
71 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1625
Faulty:
tType=-9;
Seed:
if (tType == -18) {
  g=0.25 * 0.333;
}
 else {
  g=0.25;
}
**************************************************
72 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1478
Faulty:
if (dMin == dN) {
  gam=dN;
  a2=0.0;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  b2=work[nn - 5] / work[nn - 7];
  np=nn - 9;
}
 else {
  np=nn - 2 * pingPong;
  b2=work[np - 2];
  gam=dN1;
  if (work[np - 4] > work[np - 2]) {
    return;
  }
  a2=work[np - 4] / work[np - 2];
  if (work[nn - 9] > work[nn - 11]) {
    return;
  }
  b2=work[nn - 9] / work[nn - 11];
  np=nn - 13;
}
Seed:
np=nn - 2 * pingPong;
**************************************************
73 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1098
Faulty:
if (dMin1 > 0.0) {
  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
  tType-=11;
}
 else {
  tau*=0.25;
  tType-=12;
}
Seed:
if (flipIfWarranted(deflatedEnd,1)) {
  dMin2=Math.min(dMin2,work[l - 1]);
  work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));
  work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));
  qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));
  dMin=-0.0;
}
**************************************************
74 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1481
Faulty:
if (work[nn - 5] > work[nn - 7]) {
  return;
}
Seed:
s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
**************************************************
Evaluations: 1657
EstimatedTime: 504505
