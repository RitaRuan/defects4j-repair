1 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
**************************************************
2 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
**************************************************
3 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
return copy().mapTanToSelf();
**************************************************
4 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {
  tType=-10;
  final double s=0.333 * dMin2;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1*=work[i4] / work[i4 - 2];
      b2+=b1;
      if (100 * b1 < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin2 / (1 + b2 * b2);
  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
  }
}
 else {
  tau=0.25 * dMin2;
  tType=-11;
}
**************************************************
5 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1475
Faulty:
double s=0.25 * dMin;
Seed:
tType=-9;
**************************************************
6 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
**************************************************
7 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
int mBlockIndex=0;
**************************************************
8 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1480
Faulty:
a2=0.0;
Seed:
tau=g * dMin;
**************************************************
9 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1534
Faulty:
double b1=work[np - 2];
Seed:
dN2=0;
**************************************************
10 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
work[4 * end - pingPong - 1]=eMin;
**************************************************
11 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1480
Faulty:
a2=0.0;
Seed:
double d=work[4 * start + pingPong] - tau;
**************************************************
12 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
return copy().mapTanToSelf();
**************************************************
13 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {
  tType=-10;
  final double s=0.333 * dMin2;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1*=work[i4] / work[i4 - 2];
      b2+=b1;
      if (100 * b1 < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin2 / (1 + b2 * b2);
  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
  }
}
 else {
  tau=0.25 * dMin2;
  tType=-11;
}
**************************************************
14 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1475
Faulty:
double s=0.25 * dMin;
Seed:
tType=-9;
**************************************************
15 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
**************************************************
16 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
int mBlockIndex=0;
**************************************************
17 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1480
Faulty:
a2=0.0;
Seed:
tau=g * dMin;
**************************************************
18 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1485
Faulty:
np=nn - 9;
Seed:
final int prime=31;
**************************************************
19 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1479
Faulty:
gam=dN;
Seed:
double upper=Double.NEGATIVE_INFINITY;
**************************************************
20 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1520
Faulty:
if (a2 < cnst1) {
  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
}
Seed:
double gamma=0;
**************************************************
21 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
work[4 * end - pingPong - 1]=eMin;
**************************************************
22 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1529
Faulty:
tType=-5;
Seed:
double sum2=0;
**************************************************
23 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1481
Faulty:
if (work[nn - 5] > work[nn - 7]) {
  return;
}
Seed:
updateSigma(tau);
**************************************************
24 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1509
Faulty:
return;
Seed:
final int p=main.length;
**************************************************
25 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1621
Faulty:
tau=0.25 * dMin1;
Seed:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
**************************************************
26 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1530
Faulty:
double s=0.25 * dMin;
Seed:
tType-=12;
**************************************************
27 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
switch (deflated) {
case 0:
  if (dMin == dN || dMin == dN1) {
    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);
    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);
    double a2=work[nn - 7] + work[nn - 5];
    if (dMin == dN && dMin1 == dN1) {
      final double gap2=dMin2 - a2 - dMin2 * 0.25;
      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));
      if (gap1 > 0.0 && gap1 > b1) {
        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);
        tType=-2;
      }
 else {
        double s=0.0;
        if (dN > b1) {
          s=dN - b1;
        }
        if (a2 > (b1 + b2)) {
          s=Math.min(s,a2 - (b1 + b2));
        }
        tau=Math.max(s,0.333 * dMin);
        tType=-3;
      }
    }
 else {
      tType=-4;
      double s=0.25 * dMin;
      double gam;
      int np;
      if (dMin == dN) {
        gam=dN;
        a2=0.0;
        if (work[nn - 5] > work[nn - 7]) {
          return;
        }
        b2=work[nn - 5] / work[nn - 7];
        np=nn - 9;
      }
 else {
        np=nn - 2 * pingPong;
        b2=work[np - 2];
        gam=dN1;
        if (work[np - 4] > work[np - 2]) {
          return;
        }
        a2=work[np - 4] / work[np - 2];
        if (work[nn - 9] > work[nn - 11]) {
          return;
        }
        b2=work[nn - 9] / work[nn - 11];
        np=nn - 13;
      }
      a2=a2 + b2;
      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {
        if (b2 == 0.0) {
          break;
        }
        b1=b2;
        if (work[i4] > work[i4 - 2]) {
          return;
        }
        b2=b2 * (work[i4] / work[i4 - 2]);
        a2=a2 + b2;
        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
          break;
        }
      }
      a2=cnst3 * a2;
      if (a2 < cnst1) {
        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
      }
      tau=s;
    }
  }
 else   if (dMin == dN2) {
    tType=-5;
    double s=0.25 * dMin;
    final int np=nn - 2 * pingPong;
    double b1=work[np - 2];
    double b2=work[np - 6];
    final double gam=dN2;
    if (work[np - 8] > b2 || work[np - 4] > b1) {
      return;
    }
    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);
    if (end - start > 2) {
      b2=work[nn - 13] / work[nn - 15];
      a2=a2 + b2;
      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
        if (b2 == 0.0) {
          break;
        }
        b1=b2;
        if (work[i4] > work[i4 - 2]) {
          return;
        }
        b2=b2 * (work[i4] / work[i4 - 2]);
        a2=a2 + b2;
        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
          break;
        }
      }
      a2=cnst3 * a2;
    }
    if (a2 < cnst1) {
      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);
    }
 else {
      tau=s;
    }
  }
 else {
    if (tType == -6) {
      g+=0.333 * (1 - g);
    }
 else     if (tType == -18) {
      g=0.25 * 0.333;
    }
 else {
      g=0.25;
    }
    tau=g * dMin;
    tType=-6;
  }
break;
case 1:
if (dMin1 == dN1 && dMin2 == dN2) {
tType=-7;
double s=0.333 * dMin1;
if (work[nn - 5] > work[nn - 7]) {
  return;
}
double b1=work[nn - 5] / work[nn - 7];
double b2=b1;
if (b2 != 0.0) {
  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    final double oldB1=b1;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b1=b1 * (work[i4] / work[i4 - 2]);
    b2=b2 + b1;
    if (100 * Math.max(b1,oldB1) < b2) {
      break;
    }
  }
}
b2=Math.sqrt(cnst3 * b2);
final double a2=dMin1 / (1 + b2 * b2);
final double gap2=0.5 * dMin2 - a2;
if (gap2 > 0.0 && gap2 > b2 * a2) {
  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
}
 else {
  tau=Math.max(s,a2 * (1 - cnst2 * b2));
  tType=-8;
}
}
 else {
tau=0.25 * dMin1;
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
tType=-9;
}
break;
case 2:
if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {
tType=-10;
final double s=0.333 * dMin2;
if (work[nn - 5] > work[nn - 7]) {
return;
}
double b1=work[nn - 5] / work[nn - 7];
double b2=b1;
if (b2 != 0.0) {
for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
if (work[i4] > work[i4 - 2]) {
  return;
}
b1*=work[i4] / work[i4 - 2];
b2+=b1;
if (100 * b1 < b2) {
  break;
}
}
}
b2=Math.sqrt(cnst3 * b2);
final double a2=dMin2 / (1 + b2 * b2);
final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;
if (gap2 > 0.0 && gap2 > b2 * a2) {
tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
}
 else {
tau=Math.max(s,a2 * (1 - cnst2 * b2));
}
}
 else {
tau=0.25 * dMin2;
tType=-11;
}
break;
default :
tau=0.0;
tType=-12;
}
**************************************************
Evaluations: 399
EstimatedTime: 154065
