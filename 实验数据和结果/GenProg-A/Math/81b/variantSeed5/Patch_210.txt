1 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1508
Faulty:
if (work[i4] > work[i4 - 2]) {
  return;
}
Seed:
int result=1;
**************************************************
2 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1508
Faulty:
if (work[i4] > work[i4 - 2]) {
  return;
}
Seed:
double d=work[4 * start + pingPong] - tau;
**************************************************
3 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1537
Faulty:
if (work[np - 8] > b2 || work[np - 4] > b1) {
  return;
}
Seed:
double res=0;
**************************************************
4 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
this.secondary=secondary.clone();
**************************************************
5 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1508
Faulty:
if (work[i4] > work[i4 - 2]) {
  return;
}
Seed:
double d=work[4 * start + pingPong] - tau;
**************************************************
6 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1484
Faulty:
b2=work[nn - 5] / work[nn - 7];
Seed:
tType=-10;
**************************************************
7 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1509
Faulty:
return;
Seed:
if (dMin == dN2) {
  tType=-5;
  double s=0.25 * dMin;
  final int np=nn - 2 * pingPong;
  double b1=work[np - 2];
  double b2=work[np - 6];
  final double gam=dN2;
  if (work[np - 8] > b2 || work[np - 4] > b1) {
    return;
  }
  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);
  if (end - start > 2) {
    b2=work[nn - 13] / work[nn - 15];
    a2=a2 + b2;
    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      if (b2 == 0.0) {
        break;
      }
      b1=b2;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b2=b2 * (work[i4] / work[i4 - 2]);
      a2=a2 + b2;
      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
        break;
      }
    }
    a2=cnst3 * a2;
  }
  if (a2 < cnst1) {
    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);
  }
 else {
    tau=s;
  }
}
 else {
  if (tType == -6) {
    g+=0.333 * (1 - g);
  }
 else   if (tType == -18) {
    g=0.25 * 0.333;
  }
 else {
    g=0.25;
  }
  tau=g * dMin;
  tType=-6;
}
**************************************************
8 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1504
Faulty:
if (b2 == 0.0) {
  break;
}
Seed:
double n2=1;
**************************************************
Evaluations: 275
EstimatedTime: 90800
