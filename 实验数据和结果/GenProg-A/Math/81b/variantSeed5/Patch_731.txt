1 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
this.secondary=secondary.clone();
**************************************************
2 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1537
Faulty:
if (work[np - 8] > b2 || work[np - 4] > b1) {
  return;
}
Seed:
double res=0;
**************************************************
3 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1534
Faulty:
double b1=work[np - 2];
Seed:
double invIJ=0;
**************************************************
4 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1513
Faulty:
if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
  break;
}
Seed:
b1*=work[i4] / work[i4 - 2];
**************************************************
5 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1507
Faulty:
b1=b2;
Seed:
if (tType == -6) {
  g+=0.333 * (1 - g);
}
 else if (tType == -18) {
  g=0.25 * 0.333;
}
 else {
  g=0.25;
}
**************************************************
6 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
tau*=0.25;
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1622
Faulty:
if (dMin1 == dN1) {
  tau=0.5 * dMin1;
}
Seed:
this.realEigenvalues=realEigenvalues;
**************************************************
8 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
this.secondary=secondary.clone();
**************************************************
9 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1543
Faulty:
if (end - start > 2) {
  b2=work[nn - 13] / work[nn - 15];
  a2=a2 + b2;
  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
    if (b2 == 0.0) {
      break;
    }
    b1=b2;
    if (work[i4] > work[i4 - 2]) {
      return;
    }
    b2=b2 * (work[i4] / work[i4 - 2]);
    a2=a2 + b2;
    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
      break;
    }
  }
  a2=cnst3 * a2;
}
Seed:
tau*=0.25;
**************************************************
10 InsertBefore /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1529
Faulty:
tType=-5;
Seed:
this.splitTolerance=splitTolerance;
**************************************************
11 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1474
Faulty:
tType=-4;
Seed:
int dataPos=0;
**************************************************
12 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1544
Faulty:
b2=work[nn - 13] / work[nn - 15];
Seed:
OpenMapRealVector res=new OpenMapRealVector(this,1);
**************************************************
13 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1474
Faulty:
tType=-4;
Seed:
int regularPos=0;
**************************************************
14 Replace /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1512
Faulty:
a2=a2 + b2;
Seed:
if (dMin == dN) {
  gam=dN;
  a2=0.0;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  b2=work[nn - 5] / work[nn - 7];
  np=nn - 9;
}
 else {
  np=nn - 2 * pingPong;
  b2=work[np - 2];
  gam=dN1;
  if (work[np - 4] > work[np - 2]) {
    return;
  }
  a2=work[np - 4] / work[np - 2];
  if (work[nn - 9] > work[nn - 11]) {
    return;
  }
  b2=work[nn - 9] / work[nn - 11];
  np=nn - 13;
}
**************************************************
15 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1513
Faulty:
if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
  break;
}
Seed:
double trace=0;
**************************************************
16 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1586
Faulty:
if (dMin1 == dN1 && dMin2 == dN2) {
  tType=-7;
  double s=0.333 * dMin1;
  if (work[nn - 5] > work[nn - 7]) {
    return;
  }
  double b1=work[nn - 5] / work[nn - 7];
  double b2=b1;
  if (b2 != 0.0) {
    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
      final double oldB1=b1;
      if (work[i4] > work[i4 - 2]) {
        return;
      }
      b1=b1 * (work[i4] / work[i4 - 2]);
      b2=b2 + b1;
      if (100 * Math.max(b1,oldB1) < b2) {
        break;
      }
    }
  }
  b2=Math.sqrt(cnst3 * b2);
  final double a2=dMin1 / (1 + b2 * b2);
  final double gap2=0.5 * dMin2 - a2;
  if (gap2 > 0.0 && gap2 > b2 * a2) {
    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));
  }
 else {
    tau=Math.max(s,a2 * (1 - cnst2 * b2));
    tType=-8;
  }
}
 else {
  tau=0.25 * dMin1;
  if (dMin1 == dN1) {
    tau=0.5 * dMin1;
  }
  tType=-9;
}
Seed:
cachedVt=null;
**************************************************
17 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1544
Faulty:
b2=work[nn - 13] / work[nn - 15];
Seed:
double sum=0;
**************************************************
18 Delete /home/rtx/repair/d4j/Math/81b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java 1508
Faulty:
if (work[i4] > work[i4 - 2]) {
  return;
}
Seed:
final int nCols=this.getColumnDimension();
**************************************************
Evaluations: 892
EstimatedTime: 298599
