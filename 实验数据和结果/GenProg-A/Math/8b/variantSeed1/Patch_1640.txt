1 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 189
Faulty:
for (int i=0; i < sampleSize; i++) {
  out[i]=sample();
}
Seed:
final double n=random.nextGaussian();
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 158
Faulty:
double sum=0;
Seed:
final List<Pair<Double,T>> list=new ArrayList<Pair<Double,T>>();
**************************************************
3 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 187
Faulty:
final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
Seed:
if (sampleSize < 0) {
  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
**************************************************
4 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 158
Faulty:
double sum=0;
Seed:
final double x=random.nextGaussian();
**************************************************
5 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/util/MathArrays.java 1269
Faulty:
for (int i=0; i < len; i++) {
  if (Double.isNaN(values[i])) {
    out[i]=Double.NaN;
  }
 else {
    out[i]=values[i] * normalizedSum / sum;
  }
}
Seed:
final double[] prodHigh=new double[len];
**************************************************
Evaluations: 1790
EstimatedTime: 386248
