1 Delete /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 189
Faulty:
for (int i=0; i < sampleSize; i++) {
  out[i]=sample();
}
Seed:
int i=1;
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 187
Faulty:
final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
Seed:
int a=0;
**************************************************
3 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
double min=Double.POSITIVE_INFINITY;
**************************************************
4 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 161
Faulty:
sum+=probabilities[i];
Seed:
double r=1.0d;
**************************************************
5 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
double min=Double.POSITIVE_INFINITY;
**************************************************
6 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 162
Faulty:
if (randomValue < sum) {
  return singletons.get(i);
}
Seed:
final List<Pair<T,Double>> samples=new ArrayList<Pair<T,Double>>(probabilities.length);
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
double x=0;
**************************************************
Evaluations: 1513
EstimatedTime: 312416
