1 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
final double m=getMean();
**************************************************
2 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 158
Faulty:
double sum=0;
Seed:
double mean=0;
**************************************************
3 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 187
Faulty:
final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
Seed:
double y=0;
**************************************************
4 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 160
Faulty:
for (int i=0; i < probabilities.length; i++) {
  sum+=probabilities[i];
  if (randomValue < sum) {
    return singletons.get(i);
  }
}
Seed:
double y=0;
**************************************************
5 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
final double m=getMean();
**************************************************
6 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 189
Faulty:
for (int i=0; i < sampleSize; i++) {
  out[i]=sample();
}
Seed:
int min=Integer.MAX_VALUE;
**************************************************
7 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
final double sigma=FastMath.sqrt(getNumericalVariance());
**************************************************
8 Delete /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 190
Faulty:
out[i]=sample();
Seed:
final double mu=getNumericalMean();
**************************************************
9 InsertBefore /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 189
Faulty:
for (int i=0; i < sampleSize; i++) {
  out[i]=sample();
}
Seed:
final List<Pair<Double,T>> list=new ArrayList<Pair<Double,T>>();
**************************************************
10 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 189
Faulty:
for (int i=0; i < sampleSize; i++) {
  out[i]=sample();
}
Seed:
double max=Double.NEGATIVE_INFINITY;
**************************************************
11 Replace /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 189
Faulty:
for (int i=0; i < sampleSize; i++) {
  out[i]=sample();
}
Seed:
double max=Double.NEGATIVE_INFINITY;
**************************************************
12 Delete /home/rtx/repair/d4j/Math/8b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java 182
Faulty:
if (sampleSize <= 0) {
  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
Seed:
throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
**************************************************
Evaluations: 1130
EstimatedTime: 220393
