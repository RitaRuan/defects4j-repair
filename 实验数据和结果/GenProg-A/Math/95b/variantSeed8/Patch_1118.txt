1 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
ret=0.5;
**************************************************
2 Delete /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
return getLowerDomain(getPopulationSize(),getNumberOfSuccesses(),getSampleSize());
**************************************************
3 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 184
Faulty:
this.denominatorDegreesOfFreedom=degreesOfFreedom;
Seed:
double m=getDenominatorDegreesOfFreedom();
**************************************************
4 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 180
Faulty:
if (degreesOfFreedom <= 0.0) {
  throw new IllegalArgumentException("degrees of freedom must be positive.");
}
Seed:
this.denominatorDegreesOfFreedom=degreesOfFreedom;
**************************************************
5 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java 84
Faulty:
bracket=UnivariateRealSolverUtils.bracket(rootFindingFunction,getInitialDomain(p),lowerBound,upperBound);
Seed:
if (p < 0.0 || p > 1.0) {
  throw new IllegalArgumentException("p must be between 0.0 and 1.0, inclusive.");
}
**************************************************
Evaluations: 1484
EstimatedTime: 678455
