1 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
2 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
3 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
ret=0.0;
**************************************************
4 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
5 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
6 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
ret=0.0;
**************************************************
7 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 103
Faulty:
if (p == 1) {
  return Double.POSITIVE_INFINITY;
}
Seed:
if (p < 0.0 || p > 1.0) {
  throw new IllegalArgumentException("p must be between 0 and 1.0 (inclusive)");
}
**************************************************
Evaluations: 1867
EstimatedTime: 882716
