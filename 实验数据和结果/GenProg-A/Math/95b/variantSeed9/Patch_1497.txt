1 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
2 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
3 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
4 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
5 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
ret=0.0;
**************************************************
6 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java 128
Faulty:
return bracket(function,initial,lowerBound,upperBound,Integer.MAX_VALUE);
Seed:
int i=0;
**************************************************
7 Delete /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 145
Faulty:
double d=getDenominatorDegreesOfFreedom();
Seed:
return -1;
**************************************************
8 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java 178
Faulty:
if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
  throw new IllegalArgumentException("Invalid endpoint parameters:  lowerBound=" + lowerBound + " initial="+ initial+ " upperBound="+ upperBound);
}
Seed:
if (maximumIterations <= 0) {
  throw new IllegalArgumentException("bad value for maximumIterations: " + maximumIterations);
}
**************************************************
9 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
10 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
11 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
12 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java 178
Faulty:
if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
  throw new IllegalArgumentException("Invalid endpoint parameters:  lowerBound=" + lowerBound + " initial="+ initial+ " upperBound="+ upperBound);
}
Seed:
if (maximumIterations <= 0) {
  throw new IllegalArgumentException("bad value for maximumIterations: " + maximumIterations);
}
**************************************************
13 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 78
Faulty:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
Seed:
ret=Beta.regularizedBeta((n * x) / (m + n * x),0.5 * n,0.5 * m);
**************************************************
14 Replace /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
ret=0.0;
**************************************************
15 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 103
Faulty:
if (p == 1) {
  return Double.POSITIVE_INFINITY;
}
Seed:
if (p < 0.0 || p > 1.0) {
  throw new IllegalArgumentException("p must be between 0 and 1.0 (inclusive)");
}
**************************************************
16 InsertBefore /home/ubuntu/rtx/d4j/Math/95b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java 147
Faulty:
ret=d / (d - 2.0);
Seed:
ret=1.0;
**************************************************
Evaluations: 1907
EstimatedTime: 905052
