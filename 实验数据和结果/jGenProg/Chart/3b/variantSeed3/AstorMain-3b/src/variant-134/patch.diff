--- /source/org/jfree/data/time/TimeSeries.java
+++ /source/org/jfree/data/time/TimeSeries.java
@@ -638,3 +637,0 @@
-				fireSeriesChanged();
-			}
-		}
@@ -642 +638,0 @@
-	}
@@ -651 +646,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
@@ -653,2 +647,0 @@
-		add(period, value, true);
-	}
@@ -664 +656,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
@@ -666,3 +657,0 @@
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
@@ -678 +666,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
@@ -680,2 +667,0 @@
-		add(period, value, true);
-	}
@@ -691 +676,0 @@
-	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
@@ -693,3 +677,0 @@
-		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		add(item, notify);
-	}
@@ -704,9 +685,0 @@
-	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
-		int index = java.util.Collections.binarySearch(this.data, temp);
-		if (index < 0) {
-			throw new org.jfree.data.general.SeriesException("There is no existing value for the " + 
-			"specified 'period'.");
-		}
-		update(index, value);
-	}
@@ -720,13 +693,40 @@
-	public void update(int index, java.lang.Number value) {
-		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
-		boolean iterate = false;
-		java.lang.Number oldYN = item.getValue();
-		if (oldYN != null) {
-			double oldY = oldYN.doubleValue();
-			if (!java.lang.Double.isNaN(oldY)) {
-				iterate = (oldY <= this.minY) || (oldY >= this.maxY);
-			}
-		}
-		item.setValue(value);
-		if (iterate) {
-			findBoundsByIteration();
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+				findBoundsByIteration();}}} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		add(period, value, true);} 	public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) { 		org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		add(item, notify);} 	public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value); 		int index = java.util.Collections.binarySearch(this.data, temp); 		if (index < 0) { 			throw new org.jfree.data.general.SeriesException("There is no existing value for the " + "specified 'period'.");} 		update(index, value);} 	public void update(int index, java.lang.Number value) { 		org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index))); 		boolean iterate = false; 		java.lang.Number oldYN = item.getValue(); 		if (oldYN != null) { 			double oldY = oldYN.doubleValue(); 			if (!java.lang.Double.isNaN(oldY)) { 				iterate = (oldY <= this.minY) || (oldY >= this.maxY);}} 		item.setValue(value); 		if (iterate) { 			findBoundsByIteration();

