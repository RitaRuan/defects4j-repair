--- /home/rtx/repair/d4j/Jsoup/45b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
+++ /home/rtx/repair/d4j/Jsoup/45b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
@@ -830,26 +829,0 @@
-					tb.error(this);
-					boolean processed = tb.processEndTag("table");
-					if (processed) 
-					{ 						return tb.process(t);}
-				} else if (org.jsoup.helper.StringUtil.in(name, "style", "script")) {
-					return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);
-				} else if (name.equals("input")) {
-					if (!startTag.attributes.get("type").equalsIgnoreCase("hidden")) {
-						return anythingElse(t, tb);
-					} else {
-						tb.insertEmpty(startTag);
-					}
-				} else if (name.equals("form")) {
-					tb.error(this);
-					if (tb.getFormElement() != null)
-						return false;else 
-					{
-						tb.insertForm(startTag, false);
-					}
-				} else {
-					return anythingElse(t, tb);
-				}
-				return true;
-			} else if (t.isEndTag()) {
-				org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-				java.lang.String name = endTag.name();
@@ -857,23 +830,0 @@
-				if (name.equals("table")) {
-					if (!tb.inTableScope(name)) {
-						tb.error(this);
-						return false;
-					} else {
-						tb.popStackToClose("table");
-					}
-					tb.resetInsertionMode();
-				} else if (org.jsoup.helper.StringUtil.in(name, 
-				"body", "caption", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) {
-					tb.error(this);
-					return false;
-				} else {
-					return anythingElse(t, tb);
-				}
-				return true;
-			} else if (t.isEOF()) {
-				if (tb.currentElement().nodeName().equals("html"))
-					tb.error(this);
-				return true;
-			}
-			return anythingElse(t, tb);
-		}
@@ -881,30 +831,0 @@
-		boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			tb.error(this);
-			boolean processed;
-			if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
-				tb.setFosterInserts(true);
-				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);
-				tb.setFosterInserts(false);
-			} else {
-				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);
-			}
-			return processed;
-		}
-	},
-	InTableText() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			switch (t.type) {
-				case Character :
-					org.jsoup.parser.Token.Character c = t.asCharacter();
-					if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {
-						tb.error(this);
-						return false;
-					} else {
-						tb.getPendingTableCharacters().add(c.getData());
-					}
-					break;
-				default :
-
-					if (tb.getPendingTableCharacters().size() > 0) {
-						for (java.lang.String character : tb.getPendingTableCharacters()) {
-							if (!org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(character)) {
@@ -912,36 +833,115 @@
-								tb.error(this);
-								if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
-									tb.setFosterInserts(true);
-									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);
-									tb.setFosterInserts(false);
-								} else {
-									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);
-								}
-							} else
-								tb.insert(new org.jsoup.parser.Token.Character().data(character));
-						}
-						tb.newPendingTableCharacters();
-					}
-					tb.transition(tb.originalState());
-					return tb.process(t);}
-
-			return true;
-		}
-	},
-	InCaption() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			if (t.isEndTag() && t.asEndTag().name().equals("caption")) {
-				org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-				java.lang.String name = endTag.name();
-				if (!tb.inTableScope(name)) {
-					tb.error(this);
-					return false;
-				} else {
-					tb.generateImpliedEndTags();
-					if (!tb.currentElement().nodeName().equals("caption"))
-						tb.error(this);
-					tb.popStackToClose("caption");
-					tb.clearFormattingElementsToLastMarker();
-					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);
-				}
-			} else if (
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+					if (
@@ -955 +955 @@
-					return tb.process(t);
+						{ 							return tb.process(t);}
@@ -962 +962 @@
-			}
+					} 					tb.error(this); 					boolean processed = tb.processEndTag("table"); 					if (processed) { 						return tb.process(t);}} else if (org.jsoup.helper.StringUtil.in(name, "style", "script")) { 					return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);} else if (name.equals("input")) { 					if (!startTag.attributes.get("type").equalsIgnoreCase("hidden")) { 						return anythingElse(t, tb);} else { 						tb.insertEmpty(startTag);}} else if (name.equals("form")) { 					tb.error(this); 					if (tb.getFormElement() != null) 						return false;else { 						tb.insertForm(startTag, false);}} else { 					return anythingElse(t, tb);} 				return true;} else if (t.isEndTag()) { 				org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 				java.lang.String name = endTag.name(); 				if (name.equals("table")) { 					if (!tb.inTableScope(name)) { 						tb.error(this); 						return false;} else { 						tb.popStackToClose("table");} 					tb.resetInsertionMode();} else if (org.jsoup.helper.StringUtil.in(name, "body", "caption", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) { 					tb.error(this); 					return false;} else { 					return anythingElse(t, tb);} 				return true;} else if (t.isEOF()) { 				if (tb.currentElement().nodeName().equals("html")) 					tb.error(this); 				return true;} 			return anythingElse(t, tb);} 		boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			tb.error(this); 			boolean processed; 			if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) { 				tb.setFosterInserts(true); 				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody); 				tb.setFosterInserts(false);} else { 				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);} 			return processed;}}, 	InTableText() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			switch (t.type) { 				case Character : 					org.jsoup.parser.Token.Character c = t.asCharacter(); 					if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) { 						tb.error(this); 						return false;} else { 						tb.getPendingTableCharacters().add(c.getData());} 					break; 				default : 					if (tb.getPendingTableCharacters().size() > 0) { 						for (java.lang.String character : tb.getPendingTableCharacters()) { 							if (!org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(character)) { 								tb.error(this); 								if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) { 									tb.setFosterInserts(true); 									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody); 									tb.setFosterInserts(false);} else { 									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);}} else 								tb.insert(new org.jsoup.parser.Token.Character().data(character));} 						tb.newPendingTableCharacters();} 					tb.transition(tb.originalState()); 					return tb.process(t);} 			return true;}}, 	InCaption() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			if (t.isEndTag() && t.asEndTag().name().equals("caption")) { 				org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 				java.lang.String name = endTag.name(); 				if (!tb.inTableScope(name)) { 					tb.error(this); 					return false;} else { 					tb.generateImpliedEndTags(); 					if (!tb.currentElement().nodeName().equals("caption")) 						tb.error(this); 					tb.popStackToClose("caption"); 					tb.clearFormattingElementsToLastMarker(); 					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else if ((t.isStartTag() && org.jsoup.helper.StringUtil.in(t.asStartTag().name(), "caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr")) || (t.isEndTag() && t.asEndTag().name().equals("table"))) { 				tb.error(this); 				boolean processed = tb.processEndTag("caption"); 				if (processed) 					return tb.process(t);} else if (t.isEndTag() && org.jsoup.helper.StringUtil.in(t.asEndTag().name(), "body", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) { 				tb.error(this); 				return false;} else { 				return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);}

