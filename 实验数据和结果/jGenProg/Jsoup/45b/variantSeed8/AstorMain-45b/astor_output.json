{"general":{"NR_RIGHT_COMPILATIONS":2,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":null,"NR_GENERATIONS":2,"TOTAL_TIME":4.001,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"4","VALIDATION":"|true|0|454|[]|","patchhunks":[{"LOCATION":"org.jsoup.parser.HtmlTreeBuilderState","PATH":"\\\/home\\\/rtx\\\/repair\\\/d4j\\\/Jsoup\\\/45b\\\/src\\\/main\\\/java\\\/org\\\/jsoup\\\/parser\\\/HtmlTreeBuilderState.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0.707","INGREDIENT_PARENT":"if (!tb.inTableScope(name)) {\\n\\ttb.error(this);\\n\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);\\n\\treturn false;\\n}","PATCH_HUNK_TYPE":"CtIfImpl|CtBlockImpl","ORIGINAL_CODE":"if (processed) \\n{ \\treturn tb.process(t);}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/home\\\/rtx\\\/repair\\\/d4j\\\/Jsoup\\\/45b\\\/jgenprog\\\/variantSeed8\\\/AstorMain-45b\\\/\\\/src\\\/\\\/variant-4\\\/org\\\/jsoup\\\/parser\\\/HtmlTreeBuilderState.java","LINE":"832","MP_RANKING":"7","PATCH_HUNK_CODE":"if (!tb.inTableScope(name)) {\\n\\ttb.error(this);\\n\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);\\n\\treturn false;\\n}"}],"TIME":"3","GENERATION":"2","FOLDER_SOLUTION_CODE":"\\\/home\\\/rtx\\\/repair\\\/d4j\\\/Jsoup\\\/45b\\\/jgenprog\\\/variantSeed8\\\/AstorMain-45b\\\/\\\/src\\\/\\\/variant-4","PATCH_DIFF_ORIG":"--- \\\/home\\\/rtx\\\/repair\\\/d4j\\\/Jsoup\\\/45b\\\/src\\\/main\\\/java\\\/org\\\/jsoup\\\/parser\\\/HtmlTreeBuilderState.java\\n+++ \\\/home\\\/rtx\\\/repair\\\/d4j\\\/Jsoup\\\/45b\\\/src\\\/main\\\/java\\\/org\\\/jsoup\\\/parser\\\/HtmlTreeBuilderState.java\\n@@ -832,24 +831,0 @@\\n-\\t\\t\\t\\t\\tif (processed)\\n-\\t\\t\\t\\t\\t\\treturn tb.process(t);\\n-\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"style\\\", \\\"script\\\")) {\\n-\\t\\t\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);\\n-\\t\\t\\t\\t} else if (name.equals(\\\"input\\\")) {\\n-\\t\\t\\t\\t\\tif (!startTag.attributes.get(\\\"type\\\").equalsIgnoreCase(\\\"hidden\\\")) {\\n-\\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\ttb.insertEmpty(startTag);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t} else if (name.equals(\\\"form\\\")) {\\n-\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\tif (tb.getFormElement() != null)\\n-\\t\\t\\t\\t\\t\\treturn false;else \\n-\\t\\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\t\\ttb.insertForm(startTag, false);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\treturn true;\\n-\\t\\t\\t} else if (t.isEndTag()) {\\n-\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag();\\n-\\t\\t\\t\\tjava.lang.String name = endTag.name();\\n@@ -857,23 +832,0 @@\\n-\\t\\t\\t\\tif (name.equals(\\\"table\\\")) {\\n-\\t\\t\\t\\t\\tif (!tb.inTableScope(name)) {\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\ttb.popStackToClose(\\\"table\\\");\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\ttb.resetInsertionMode();\\n-\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\n-\\t\\t\\t\\t\\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) {\\n-\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\treturn true;\\n-\\t\\t\\t} else if (t.isEOF()) {\\n-\\t\\t\\t\\tif (tb.currentElement().nodeName().equals(\\\"html\\\"))\\n-\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\treturn true;\\n-\\t\\t\\t}\\n-\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t}\\n@@ -881,30 +833,0 @@\\n-\\t\\tboolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\ttb.error(this);\\n-\\t\\t\\tboolean processed;\\n-\\t\\t\\tif (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) {\\n-\\t\\t\\t\\ttb.setFosterInserts(true);\\n-\\t\\t\\t\\tprocessed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);\\n-\\t\\t\\t\\ttb.setFosterInserts(false);\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\tprocessed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn processed;\\n-\\t\\t}\\n-\\t},\\n-\\tInTableText() {\\n-\\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tswitch (t.type) {\\n-\\t\\t\\t\\tcase Character :\\n-\\t\\t\\t\\t\\torg.jsoup.parser.Token.Character c = t.asCharacter();\\n-\\t\\t\\t\\t\\tif (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\ttb.getPendingTableCharacters().add(c.getData());\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tdefault :\\n-\\n-\\t\\t\\t\\t\\tif (tb.getPendingTableCharacters().size() > 0) {\\n-\\t\\t\\t\\t\\t\\tfor (java.lang.String character : tb.getPendingTableCharacters()) {\\n-\\t\\t\\t\\t\\t\\t\\tif (!org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(character)) {\\n@@ -912,150 +834,0 @@\\n-\\t\\t\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\ttb.setFosterInserts(true);\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\ttb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\ttb.setFosterInserts(false);\\n-\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\ttb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t} else\\n-\\t\\t\\t\\t\\t\\t\\t\\ttb.insert(new org.jsoup.parser.Token.Character().data(character));\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\ttb.newPendingTableCharacters();\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\ttb.transition(tb.originalState());\\n-\\t\\t\\t\\t\\treturn tb.process(t);}\\n-\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t},\\n-\\tInCaption() {\\n-\\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tif (t.isEndTag() && t.asEndTag().name().equals(\\\"caption\\\")) {\\n-\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag();\\n-\\t\\t\\t\\tjava.lang.String name = endTag.name();\\n-\\t\\t\\t\\tif (!tb.inTableScope(name)) {\\n-\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\ttb.generateImpliedEndTags();\\n-\\t\\t\\t\\t\\tif (!tb.currentElement().nodeName().equals(\\\"caption\\\"))\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\ttb.popStackToClose(\\\"caption\\\");\\n-\\t\\t\\t\\t\\ttb.clearFormattingElementsToLastMarker();\\n-\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t} else if (\\n-\\t\\t\\t(t.isStartTag() && org.jsoup.helper.StringUtil.in(t.asStartTag().name(), \\n-\\t\\t\\t\\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) || \\n-\\t\\t\\t(t.isEndTag() && t.asEndTag().name().equals(\\\"table\\\"))) \\n-\\t\\t\\t{\\n-\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\tboolean processed = tb.processEndTag(\\\"caption\\\");\\n-\\t\\t\\t\\tif (processed)\\n-\\t\\t\\t\\t\\treturn tb.process(t);\\n-\\t\\t\\t} else if (t.isEndTag() && org.jsoup.helper.StringUtil.in(t.asEndTag().name(), \\n-\\t\\t\\t\\\"body\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) {\\n-\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t},\\n-\\tInColumnGroup() {\\n-\\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tif (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(t)) {\\n-\\t\\t\\t\\ttb.insert(t.asCharacter());\\n-\\t\\t\\t\\treturn true;\\n-\\t\\t\\t}\\n-\\t\\t\\tswitch (t.type) {\\n-\\t\\t\\t\\tcase Comment :\\n-\\t\\t\\t\\t\\ttb.insert(t.asComment());\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tcase Doctype :\\n-\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tcase StartTag :\\n-\\t\\t\\t\\t\\torg.jsoup.parser.Token.StartTag startTag = t.asStartTag();\\n-\\t\\t\\t\\t\\tjava.lang.String name = startTag.name();\\n-\\t\\t\\t\\t\\tif (name.equals(\\\"html\\\"))\\n-\\t\\t\\t\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);else \\n-\\t\\t\\t\\t\\tif (name.equals(\\\"col\\\"))\\n-\\t\\t\\t\\t\\t\\ttb.insertEmpty(startTag);else\\n-\\n-\\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tcase EndTag :\\n-\\t\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag();\\n-\\t\\t\\t\\t\\tname = endTag.name();\\n-\\t\\t\\t\\t\\tif (name.equals(\\\"colgroup\\\")) {\\n-\\t\\t\\t\\t\\t\\tif (tb.currentElement().nodeName().equals(\\\"html\\\")) {\\n-\\t\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\t\\ttb.pop();\\n-\\t\\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t} else\\n-\\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tcase EOF :\\n-\\t\\t\\t\\t\\tif (tb.currentElement().nodeName().equals(\\\"html\\\"))\\n-\\t\\t\\t\\t\\t\\treturn true;else\\n-\\n-\\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\tdefault :\\n-\\t\\t\\t\\t\\treturn anythingElse(t, tb);}\\n-\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\n-\\t\\tprivate boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) {\\n-\\t\\t\\tboolean processed = tb.processEndTag(\\\"colgroup\\\");\\n-\\t\\t\\tif (processed)\\n-\\t\\t\\t\\treturn tb.process(t);\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\t},\\n-\\tInTableBody() {\\n-\\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tswitch (t.type) {\\n-\\t\\t\\t\\tcase StartTag :\\n-\\t\\t\\t\\t\\torg.jsoup.parser.Token.StartTag startTag = t.asStartTag();\\n-\\t\\t\\t\\t\\tjava.lang.String name = startTag.name();\\n-\\t\\t\\t\\t\\tif (name.equals(\\\"tr\\\")) {\\n-\\t\\t\\t\\t\\t\\ttb.clearStackToTableBodyContext();\\n-\\t\\t\\t\\t\\t\\ttb.insert(startTag);\\n-\\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);\\n-\\t\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"th\\\", \\\"td\\\")) {\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\ttb.processStartTag(\\\"tr\\\");\\n-\\t\\t\\t\\t\\t\\treturn tb.process(startTag);\\n-\\t\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) {\\n-\\t\\t\\t\\t\\t\\treturn exitTableBody(t, tb);\\n-\\t\\t\\t\\t\\t} else\\n-\\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tcase EndTag :\\n-\\t\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag();\\n-\\t\\t\\t\\t\\tname = endTag.name();\\n-\\t\\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) {\\n-\\t\\t\\t\\t\\t\\tif (!tb.inTableScope(name)) {\\n-\\t\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\t\\ttb.clearStackToTableBodyContext();\\n-\\t\\t\\t\\t\\t\\t\\ttb.pop();\\n-\\t\\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t} else if (name.equals(\\\"table\\\")) {\\n-\\t\\t\\t\\t\\t\\treturn exitTableBody(t, tb);\\n-\\t\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\", \\\"tr\\\")) {\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t} else\\n-\\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\tdefault :\\n-\\t\\t\\t\\t\\treturn anythingElse(t, tb);}\\n@@ -1063,2 +835,0 @@\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n@@ -1066,2 +836,0 @@\\n-\\t\\tprivate boolean exitTableBody(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tif (!((tb.inTableScope(\\\"tbody\\\") || tb.inTableScope(\\\"thead\\\")) || tb.inScope(\\\"tfoot\\\"))) {\\n@@ -1069,31 +837,0 @@\\n-\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t\\ttb.clearStackToTableBodyContext();\\n-\\t\\t\\ttb.processEndTag(tb.currentElement().nodeName());\\n-\\t\\t\\treturn tb.process(t);\\n-\\t\\t}\\n-\\n-\\t\\tprivate boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);\\n-\\t\\t}\\n-\\t},\\n-\\tInRow() {\\n-\\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tif (t.isStartTag()) {\\n-\\t\\t\\t\\torg.jsoup.parser.Token.StartTag startTag = t.asStartTag();\\n-\\t\\t\\t\\tjava.lang.String name = startTag.name();\\n-\\n-\\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(name, \\\"th\\\", \\\"td\\\")) {\\n-\\t\\t\\t\\t\\ttb.clearStackToTableRowContext();\\n-\\t\\t\\t\\t\\ttb.insert(startTag);\\n-\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);\\n-\\t\\t\\t\\t\\ttb.insertMarkerToFormattingElements();\\n-\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) {\\n-\\t\\t\\t\\t\\treturn handleMissingTr(t, tb);\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t} else if (t.isEndTag()) {\\n-\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag();\\n-\\t\\t\\t\\tjava.lang.String name = endTag.name();\\n@@ -1101,37 +838,0 @@\\n-\\t\\t\\t\\tif (name.equals(\\\"tr\\\")) {\\n-\\t\\t\\t\\t\\tif (!tb.inTableScope(name)) {\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\ttb.clearStackToTableRowContext();\\n-\\t\\t\\t\\t\\ttb.pop();\\n-\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);\\n-\\t\\t\\t\\t} else if (name.equals(\\\"table\\\")) {\\n-\\t\\t\\t\\t\\treturn handleMissingTr(t, tb);\\n-\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) {\\n-\\t\\t\\t\\t\\tif (!tb.inTableScope(name)) {\\n-\\t\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\ttb.processEndTag(\\\"tr\\\");\\n-\\t\\t\\t\\t\\treturn tb.process(t);\\n-\\t\\t\\t\\t} else if (org.jsoup.helper.StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\")) {\\n-\\t\\t\\t\\t\\ttb.error(this);\\n-\\t\\t\\t\\t\\treturn false;\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn anythingElse(t, tb);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn true;\\n-\\t\\t}\\n-\\n-\\t\\tprivate boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);\\n-\\t\\t}\\n-\\n-\\t\\tprivate boolean handleMissingTr(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) {\\n-\\t\\t\\tboolean processed = tb.processEndTag(\\\"tr\\\");\\n-\\t\\t\\tif (processed)\\n-\\t\\t\\t\\treturn tb.process(t);else\\n@@ -1139,8 +839,0 @@\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t},\\n-\\tInCell() {\\n-\\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {\\n-\\t\\t\\tif (t.isEndTag()) {\\n-\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag();\\n-\\t\\t\\t\\tjava.lang.String name = endTag.name();\\n@@ -1148 +841,308 @@\\n-\\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(name, \\\"td\\\", \\\"th\\\")) {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n@@ -1153 +1153 @@\\n-\\t\\t\\t\\t\\t}\\n+\\t\\t\\t\\t\\t}} else if (org.jsoup.helper.StringUtil.in(name, \\\"style\\\", \\\"script\\\")) { \\t\\t\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);} else if (name.equals(\\\"input\\\")) { \\t\\t\\t\\t\\tif (!startTag.attributes.get(\\\"type\\\").equalsIgnoreCase(\\\"hidden\\\")) { \\t\\t\\t\\t\\t\\treturn anythingElse(t, tb);} else { \\t\\t\\t\\t\\t\\ttb.insertEmpty(startTag);}} else if (name.equals(\\\"form\\\")) { \\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\tif (tb.getFormElement() != null) \\t\\t\\t\\t\\t\\treturn false;else { \\t\\t\\t\\t\\t\\ttb.insertForm(startTag, false);}} else { \\t\\t\\t\\t\\treturn anythingElse(t, tb);} \\t\\t\\t\\treturn true;} else if (t.isEndTag()) { \\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag(); \\t\\t\\t\\tjava.lang.String name = endTag.name(); \\t\\t\\t\\tif (name.equals(\\\"table\\\")) { \\t\\t\\t\\t\\tif (!tb.inTableScope(name)) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\t\\ttb.popStackToClose(\\\"table\\\");} \\t\\t\\t\\t\\ttb.resetInsertionMode();} else if (org.jsoup.helper.StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { \\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\treturn anythingElse(t, tb);} \\t\\t\\t\\treturn true;} else if (t.isEOF()) { \\t\\t\\t\\tif (tb.currentElement().nodeName().equals(\\\"html\\\")) \\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\treturn true;} \\t\\t\\treturn anythingElse(t, tb);} \\t\\tboolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\ttb.error(this); \\t\\t\\tboolean processed; \\t\\t\\tif (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { \\t\\t\\t\\ttb.setFosterInserts(true); \\t\\t\\t\\tprocessed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody); \\t\\t\\t\\ttb.setFosterInserts(false);} else { \\t\\t\\t\\tprocessed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);} \\t\\t\\treturn processed;}}, \\tInTableText() { \\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tswitch (t.type) { \\t\\t\\t\\tcase Character : \\t\\t\\t\\t\\torg.jsoup.parser.Token.Character c = t.asCharacter(); \\t\\t\\t\\t\\tif (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\t\\ttb.getPendingTableCharacters().add(c.getData());} \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tdefault : \\t\\t\\t\\t\\tif (tb.getPendingTableCharacters().size() > 0) { \\t\\t\\t\\t\\t\\tfor (java.lang.String character : tb.getPendingTableCharacters()) { \\t\\t\\t\\t\\t\\t\\tif (!org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(character)) { \\t\\t\\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), \\\"table\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { \\t\\t\\t\\t\\t\\t\\t\\t\\ttb.setFosterInserts(true); \\t\\t\\t\\t\\t\\t\\t\\t\\ttb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody); \\t\\t\\t\\t\\t\\t\\t\\t\\ttb.setFosterInserts(false);} else { \\t\\t\\t\\t\\t\\t\\t\\t\\ttb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);}} else \\t\\t\\t\\t\\t\\t\\t\\ttb.insert(new org.jsoup.parser.Token.Character().data(character));} \\t\\t\\t\\t\\t\\ttb.newPendingTableCharacters();} \\t\\t\\t\\t\\ttb.transition(tb.originalState()); \\t\\t\\t\\t\\treturn tb.process(t);} \\t\\t\\treturn true;}}, \\tInCaption() { \\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tif (t.isEndTag() && t.asEndTag().name().equals(\\\"caption\\\")) { \\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag(); \\t\\t\\t\\tjava.lang.String name = endTag.name(); \\t\\t\\t\\tif (!tb.inTableScope(name)) { \\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\ttb.generateImpliedEndTags(); \\t\\t\\t\\t\\tif (!tb.currentElement().nodeName().equals(\\\"caption\\\")) \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\ttb.popStackToClose(\\\"caption\\\"); \\t\\t\\t\\t\\ttb.clearFormattingElementsToLastMarker(); \\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else if ((t.isStartTag() && org.jsoup.helper.StringUtil.in(t.asStartTag().name(), \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) || (t.isEndTag() && t.asEndTag().name().equals(\\\"table\\\"))) { \\t\\t\\t\\ttb.error(this); \\t\\t\\t\\tboolean processed = tb.processEndTag(\\\"caption\\\"); \\t\\t\\t\\tif (processed) \\t\\t\\t\\t\\treturn tb.process(t);} else if (t.isEndTag() && org.jsoup.helper.StringUtil.in(t.asEndTag().name(), \\\"body\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"tbody\\\", \\\"td\\\", \\\"tfoot\\\", \\\"th\\\", \\\"thead\\\", \\\"tr\\\")) { \\t\\t\\t\\ttb.error(this); \\t\\t\\t\\treturn false;} else { \\t\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);} \\t\\t\\treturn true;}}, \\tInColumnGroup() { \\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tif (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(t)) { \\t\\t\\t\\ttb.insert(t.asCharacter()); \\t\\t\\t\\treturn true;} \\t\\t\\tswitch (t.type) { \\t\\t\\t\\tcase Comment : \\t\\t\\t\\t\\ttb.insert(t.asComment()); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tcase Doctype : \\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tcase StartTag : \\t\\t\\t\\t\\torg.jsoup.parser.Token.StartTag startTag = t.asStartTag(); \\t\\t\\t\\t\\tjava.lang.String name = startTag.name(); \\t\\t\\t\\t\\tif (name.equals(\\\"html\\\")) \\t\\t\\t\\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);else if (name.equals(\\\"col\\\")) \\t\\t\\t\\t\\t\\ttb.insertEmpty(startTag);else \\t\\t\\t\\t\\t\\treturn anythingElse(t, tb); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tcase EndTag : \\t\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag(); \\t\\t\\t\\t\\tname = endTag.name(); \\t\\t\\t\\t\\tif (name.equals(\\\"colgroup\\\")) { \\t\\t\\t\\t\\t\\tif (tb.currentElement().nodeName().equals(\\\"html\\\")) { \\t\\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\t\\t\\ttb.pop(); \\t\\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else \\t\\t\\t\\t\\t\\treturn anythingElse(t, tb); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tcase EOF : \\t\\t\\t\\t\\tif (tb.currentElement().nodeName().equals(\\\"html\\\")) \\t\\t\\t\\t\\t\\treturn true;else \\t\\t\\t\\t\\t\\treturn anythingElse(t, tb); \\t\\t\\t\\tdefault : \\t\\t\\t\\t\\treturn anythingElse(t, tb);} \\t\\t\\treturn true;} \\t\\tprivate boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) { \\t\\t\\tboolean processed = tb.processEndTag(\\\"colgroup\\\"); \\t\\t\\tif (processed) \\t\\t\\t\\treturn tb.process(t); \\t\\t\\treturn true;}}, \\tInTableBody() { \\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tswitch (t.type) { \\t\\t\\t\\tcase StartTag : \\t\\t\\t\\t\\torg.jsoup.parser.Token.StartTag startTag = t.asStartTag(); \\t\\t\\t\\t\\tjava.lang.String name = startTag.name(); \\t\\t\\t\\t\\tif (name.equals(\\\"tr\\\")) { \\t\\t\\t\\t\\t\\ttb.clearStackToTableBodyContext(); \\t\\t\\t\\t\\t\\ttb.insert(startTag); \\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);} else if (org.jsoup.helper.StringUtil.in(name, \\\"th\\\", \\\"td\\\")) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\ttb.processStartTag(\\\"tr\\\"); \\t\\t\\t\\t\\t\\treturn tb.process(startTag);} else if (org.jsoup.helper.StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { \\t\\t\\t\\t\\t\\treturn exitTableBody(t, tb);} else \\t\\t\\t\\t\\t\\treturn anythingElse(t, tb); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tcase EndTag : \\t\\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag(); \\t\\t\\t\\t\\tname = endTag.name(); \\t\\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { \\t\\t\\t\\t\\t\\tif (!tb.inTableScope(name)) { \\t\\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\t\\t\\ttb.clearStackToTableBodyContext(); \\t\\t\\t\\t\\t\\t\\ttb.pop(); \\t\\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else if (name.equals(\\\"table\\\")) { \\t\\t\\t\\t\\t\\treturn exitTableBody(t, tb);} else if (org.jsoup.helper.StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\", \\\"tr\\\")) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\treturn false;} else \\t\\t\\t\\t\\t\\treturn anythingElse(t, tb); \\t\\t\\t\\t\\tbreak; \\t\\t\\t\\tdefault : \\t\\t\\t\\t\\treturn anythingElse(t, tb);} \\t\\t\\treturn true;} \\t\\tprivate boolean exitTableBody(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tif (!((tb.inTableScope(\\\"tbody\\\") || tb.inTableScope(\\\"thead\\\")) || tb.inScope(\\\"tfoot\\\"))) { \\t\\t\\t\\ttb.error(this); \\t\\t\\t\\treturn false;} \\t\\t\\ttb.clearStackToTableBodyContext(); \\t\\t\\ttb.processEndTag(tb.currentElement().nodeName()); \\t\\t\\treturn tb.process(t);} \\t\\tprivate boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);}}, \\tInRow() { \\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tif (t.isStartTag()) { \\t\\t\\t\\torg.jsoup.parser.Token.StartTag startTag = t.asStartTag(); \\t\\t\\t\\tjava.lang.String name = startTag.name(); \\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(name, \\\"th\\\", \\\"td\\\")) { \\t\\t\\t\\t\\ttb.clearStackToTableRowContext(); \\t\\t\\t\\t\\ttb.insert(startTag); \\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InCell); \\t\\t\\t\\t\\ttb.insertMarkerToFormattingElements();} else if (org.jsoup.helper.StringUtil.in(name, \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\", \\\"tr\\\")) { \\t\\t\\t\\t\\treturn handleMissingTr(t, tb);} else { \\t\\t\\t\\t\\treturn anythingElse(t, tb);}} else if (t.isEndTag()) { \\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag(); \\t\\t\\t\\tjava.lang.String name = endTag.name(); \\t\\t\\t\\tif (name.equals(\\\"tr\\\")) { \\t\\t\\t\\t\\tif (!tb.inTableScope(name)) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\treturn false;} \\t\\t\\t\\t\\ttb.clearStackToTableRowContext(); \\t\\t\\t\\t\\ttb.pop(); \\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);} else if (name.equals(\\\"table\\\")) { \\t\\t\\t\\t\\treturn handleMissingTr(t, tb);} else if (org.jsoup.helper.StringUtil.in(name, \\\"tbody\\\", \\\"tfoot\\\", \\\"thead\\\")) { \\t\\t\\t\\t\\tif (!tb.inTableScope(name)) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\treturn false;} \\t\\t\\t\\t\\ttb.processEndTag(\\\"tr\\\"); \\t\\t\\t\\t\\treturn tb.process(t);} else if (org.jsoup.helper.StringUtil.in(name, \\\"body\\\", \\\"caption\\\", \\\"col\\\", \\\"colgroup\\\", \\\"html\\\", \\\"td\\\", \\\"th\\\")) { \\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\treturn false;} else { \\t\\t\\t\\t\\treturn anythingElse(t, tb);}} else { \\t\\t\\t\\treturn anythingElse(t, tb);} \\t\\t\\treturn true;} \\t\\tprivate boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\treturn tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);} \\t\\tprivate boolean handleMissingTr(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) { \\t\\t\\tboolean processed = tb.processEndTag(\\\"tr\\\"); \\t\\t\\tif (processed) \\t\\t\\t\\treturn tb.process(t);else \\t\\t\\t\\treturn false;}}, \\tInCell() { \\t\\tboolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { \\t\\t\\tif (t.isEndTag()) { \\t\\t\\t\\torg.jsoup.parser.Token.EndTag endTag = t.asEndTag(); \\t\\t\\t\\tjava.lang.String name = endTag.name(); \\t\\t\\t\\tif (org.jsoup.helper.StringUtil.in(name, \\\"td\\\", \\\"th\\\")) { \\t\\t\\t\\t\\tif (!tb.inTableScope(name)) { \\t\\t\\t\\t\\t\\ttb.error(this); \\t\\t\\t\\t\\t\\ttb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow); \\t\\t\\t\\t\\t\\treturn false;}\\n\\n"}]}