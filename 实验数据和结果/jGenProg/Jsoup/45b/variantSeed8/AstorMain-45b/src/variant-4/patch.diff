--- /home/rtx/repair/d4j/Jsoup/45b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
+++ /home/rtx/repair/d4j/Jsoup/45b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
@@ -832,24 +831,0 @@
-					if (processed)
-						return tb.process(t);
-				} else if (org.jsoup.helper.StringUtil.in(name, "style", "script")) {
-					return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);
-				} else if (name.equals("input")) {
-					if (!startTag.attributes.get("type").equalsIgnoreCase("hidden")) {
-						return anythingElse(t, tb);
-					} else {
-						tb.insertEmpty(startTag);
-					}
-				} else if (name.equals("form")) {
-					tb.error(this);
-					if (tb.getFormElement() != null)
-						return false;else 
-					{
-						tb.insertForm(startTag, false);
-					}
-				} else {
-					return anythingElse(t, tb);
-				}
-				return true;
-			} else if (t.isEndTag()) {
-				org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-				java.lang.String name = endTag.name();
@@ -857,23 +832,0 @@
-				if (name.equals("table")) {
-					if (!tb.inTableScope(name)) {
-						tb.error(this);
-						return false;
-					} else {
-						tb.popStackToClose("table");
-					}
-					tb.resetInsertionMode();
-				} else if (org.jsoup.helper.StringUtil.in(name, 
-				"body", "caption", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) {
-					tb.error(this);
-					return false;
-				} else {
-					return anythingElse(t, tb);
-				}
-				return true;
-			} else if (t.isEOF()) {
-				if (tb.currentElement().nodeName().equals("html"))
-					tb.error(this);
-				return true;
-			}
-			return anythingElse(t, tb);
-		}
@@ -881,30 +833,0 @@
-		boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			tb.error(this);
-			boolean processed;
-			if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
-				tb.setFosterInserts(true);
-				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);
-				tb.setFosterInserts(false);
-			} else {
-				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);
-			}
-			return processed;
-		}
-	},
-	InTableText() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			switch (t.type) {
-				case Character :
-					org.jsoup.parser.Token.Character c = t.asCharacter();
-					if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) {
-						tb.error(this);
-						return false;
-					} else {
-						tb.getPendingTableCharacters().add(c.getData());
-					}
-					break;
-				default :
-
-					if (tb.getPendingTableCharacters().size() > 0) {
-						for (java.lang.String character : tb.getPendingTableCharacters()) {
-							if (!org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(character)) {
@@ -912,150 +834,0 @@
-								tb.error(this);
-								if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) {
-									tb.setFosterInserts(true);
-									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);
-									tb.setFosterInserts(false);
-								} else {
-									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);
-								}
-							} else
-								tb.insert(new org.jsoup.parser.Token.Character().data(character));
-						}
-						tb.newPendingTableCharacters();
-					}
-					tb.transition(tb.originalState());
-					return tb.process(t);}
-
-			return true;
-		}
-	},
-	InCaption() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			if (t.isEndTag() && t.asEndTag().name().equals("caption")) {
-				org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-				java.lang.String name = endTag.name();
-				if (!tb.inTableScope(name)) {
-					tb.error(this);
-					return false;
-				} else {
-					tb.generateImpliedEndTags();
-					if (!tb.currentElement().nodeName().equals("caption"))
-						tb.error(this);
-					tb.popStackToClose("caption");
-					tb.clearFormattingElementsToLastMarker();
-					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);
-				}
-			} else if (
-			(t.isStartTag() && org.jsoup.helper.StringUtil.in(t.asStartTag().name(), 
-			"caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr")) || 
-			(t.isEndTag() && t.asEndTag().name().equals("table"))) 
-			{
-				tb.error(this);
-				boolean processed = tb.processEndTag("caption");
-				if (processed)
-					return tb.process(t);
-			} else if (t.isEndTag() && org.jsoup.helper.StringUtil.in(t.asEndTag().name(), 
-			"body", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) {
-				tb.error(this);
-				return false;
-			} else {
-				return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);
-			}
-			return true;
-		}
-	},
-	InColumnGroup() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			if (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(t)) {
-				tb.insert(t.asCharacter());
-				return true;
-			}
-			switch (t.type) {
-				case Comment :
-					tb.insert(t.asComment());
-					break;
-				case Doctype :
-					tb.error(this);
-					break;
-				case StartTag :
-					org.jsoup.parser.Token.StartTag startTag = t.asStartTag();
-					java.lang.String name = startTag.name();
-					if (name.equals("html"))
-						return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);else 
-					if (name.equals("col"))
-						tb.insertEmpty(startTag);else
-
-						return anythingElse(t, tb);
-					break;
-				case EndTag :
-					org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-					name = endTag.name();
-					if (name.equals("colgroup")) {
-						if (tb.currentElement().nodeName().equals("html")) {
-							tb.error(this);
-							return false;
-						} else {
-							tb.pop();
-							tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);
-						}
-					} else
-						return anythingElse(t, tb);
-					break;
-				case EOF :
-					if (tb.currentElement().nodeName().equals("html"))
-						return true;else
-
-						return anythingElse(t, tb);
-				default :
-					return anythingElse(t, tb);}
-
-			return true;
-		}
-
-		private boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) {
-			boolean processed = tb.processEndTag("colgroup");
-			if (processed)
-				return tb.process(t);
-			return true;
-		}
-	},
-	InTableBody() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			switch (t.type) {
-				case StartTag :
-					org.jsoup.parser.Token.StartTag startTag = t.asStartTag();
-					java.lang.String name = startTag.name();
-					if (name.equals("tr")) {
-						tb.clearStackToTableBodyContext();
-						tb.insert(startTag);
-						tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);
-					} else if (org.jsoup.helper.StringUtil.in(name, "th", "td")) {
-						tb.error(this);
-						tb.processStartTag("tr");
-						return tb.process(startTag);
-					} else if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "tbody", "tfoot", "thead")) {
-						return exitTableBody(t, tb);
-					} else
-						return anythingElse(t, tb);
-					break;
-				case EndTag :
-					org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-					name = endTag.name();
-					if (org.jsoup.helper.StringUtil.in(name, "tbody", "tfoot", "thead")) {
-						if (!tb.inTableScope(name)) {
-							tb.error(this);
-							return false;
-						} else {
-							tb.clearStackToTableBodyContext();
-							tb.pop();
-							tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);
-						}
-					} else if (name.equals("table")) {
-						return exitTableBody(t, tb);
-					} else if (org.jsoup.helper.StringUtil.in(name, "body", "caption", "col", "colgroup", "html", "td", "th", "tr")) {
-						tb.error(this);
-						return false;
-					} else
-						return anythingElse(t, tb);
-					break;
-				default :
-					return anythingElse(t, tb);}
@@ -1063,2 +835,0 @@
-			return true;
-		}
@@ -1066,2 +836,0 @@
-		private boolean exitTableBody(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			if (!((tb.inTableScope("tbody") || tb.inTableScope("thead")) || tb.inScope("tfoot"))) {
@@ -1069,31 +837,0 @@
-				tb.error(this);
-				return false;
-			}
-			tb.clearStackToTableBodyContext();
-			tb.processEndTag(tb.currentElement().nodeName());
-			return tb.process(t);
-		}
-
-		private boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);
-		}
-	},
-	InRow() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			if (t.isStartTag()) {
-				org.jsoup.parser.Token.StartTag startTag = t.asStartTag();
-				java.lang.String name = startTag.name();
-
-				if (org.jsoup.helper.StringUtil.in(name, "th", "td")) {
-					tb.clearStackToTableRowContext();
-					tb.insert(startTag);
-					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InCell);
-					tb.insertMarkerToFormattingElements();
-				} else if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "tbody", "tfoot", "thead", "tr")) {
-					return handleMissingTr(t, tb);
-				} else {
-					return anythingElse(t, tb);
-				}
-			} else if (t.isEndTag()) {
-				org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-				java.lang.String name = endTag.name();
@@ -1101,37 +838,0 @@
-				if (name.equals("tr")) {
-					if (!tb.inTableScope(name)) {
-						tb.error(this);
-						return false;
-					}
-					tb.clearStackToTableRowContext();
-					tb.pop();
-					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);
-				} else if (name.equals("table")) {
-					return handleMissingTr(t, tb);
-				} else if (org.jsoup.helper.StringUtil.in(name, "tbody", "tfoot", "thead")) {
-					if (!tb.inTableScope(name)) {
-						tb.error(this);
-						return false;
-					}
-					tb.processEndTag("tr");
-					return tb.process(t);
-				} else if (org.jsoup.helper.StringUtil.in(name, "body", "caption", "col", "colgroup", "html", "td", "th")) {
-					tb.error(this);
-					return false;
-				} else {
-					return anythingElse(t, tb);
-				}
-			} else {
-				return anythingElse(t, tb);
-			}
-			return true;
-		}
-
-		private boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);
-		}
-
-		private boolean handleMissingTr(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) {
-			boolean processed = tb.processEndTag("tr");
-			if (processed)
-				return tb.process(t);else
@@ -1139,8 +839,0 @@
-				return false;
-		}
-	},
-	InCell() {
-		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) {
-			if (t.isEndTag()) {
-				org.jsoup.parser.Token.EndTag endTag = t.asEndTag();
-				java.lang.String name = endTag.name();
@@ -1148 +841,308 @@
-				if (org.jsoup.helper.StringUtil.in(name, "td", "th")) {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
@@ -1153 +1153 @@
-					}
+					}} else if (org.jsoup.helper.StringUtil.in(name, "style", "script")) { 					return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InHead);} else if (name.equals("input")) { 					if (!startTag.attributes.get("type").equalsIgnoreCase("hidden")) { 						return anythingElse(t, tb);} else { 						tb.insertEmpty(startTag);}} else if (name.equals("form")) { 					tb.error(this); 					if (tb.getFormElement() != null) 						return false;else { 						tb.insertForm(startTag, false);}} else { 					return anythingElse(t, tb);} 				return true;} else if (t.isEndTag()) { 				org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 				java.lang.String name = endTag.name(); 				if (name.equals("table")) { 					if (!tb.inTableScope(name)) { 						tb.error(this); 						return false;} else { 						tb.popStackToClose("table");} 					tb.resetInsertionMode();} else if (org.jsoup.helper.StringUtil.in(name, "body", "caption", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) { 					tb.error(this); 					return false;} else { 					return anythingElse(t, tb);} 				return true;} else if (t.isEOF()) { 				if (tb.currentElement().nodeName().equals("html")) 					tb.error(this); 				return true;} 			return anythingElse(t, tb);} 		boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			tb.error(this); 			boolean processed; 			if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) { 				tb.setFosterInserts(true); 				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody); 				tb.setFosterInserts(false);} else { 				processed = tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);} 			return processed;}}, 	InTableText() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			switch (t.type) { 				case Character : 					org.jsoup.parser.Token.Character c = t.asCharacter(); 					if (c.getData().equals(org.jsoup.parser.HtmlTreeBuilderState.nullString)) { 						tb.error(this); 						return false;} else { 						tb.getPendingTableCharacters().add(c.getData());} 					break; 				default : 					if (tb.getPendingTableCharacters().size() > 0) { 						for (java.lang.String character : tb.getPendingTableCharacters()) { 							if (!org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(character)) { 								tb.error(this); 								if (org.jsoup.helper.StringUtil.in(tb.currentElement().nodeName(), "table", "tbody", "tfoot", "thead", "tr")) { 									tb.setFosterInserts(true); 									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody); 									tb.setFosterInserts(false);} else { 									tb.process(new org.jsoup.parser.Token.Character().data(character), org.jsoup.parser.HtmlTreeBuilderState.InBody);}} else 								tb.insert(new org.jsoup.parser.Token.Character().data(character));} 						tb.newPendingTableCharacters();} 					tb.transition(tb.originalState()); 					return tb.process(t);} 			return true;}}, 	InCaption() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			if (t.isEndTag() && t.asEndTag().name().equals("caption")) { 				org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 				java.lang.String name = endTag.name(); 				if (!tb.inTableScope(name)) { 					tb.error(this); 					return false;} else { 					tb.generateImpliedEndTags(); 					if (!tb.currentElement().nodeName().equals("caption")) 						tb.error(this); 					tb.popStackToClose("caption"); 					tb.clearFormattingElementsToLastMarker(); 					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else if ((t.isStartTag() && org.jsoup.helper.StringUtil.in(t.asStartTag().name(), "caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr")) || (t.isEndTag() && t.asEndTag().name().equals("table"))) { 				tb.error(this); 				boolean processed = tb.processEndTag("caption"); 				if (processed) 					return tb.process(t);} else if (t.isEndTag() && org.jsoup.helper.StringUtil.in(t.asEndTag().name(), "body", "col", "colgroup", "html", "tbody", "td", "tfoot", "th", "thead", "tr")) { 				tb.error(this); 				return false;} else { 				return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);} 			return true;}}, 	InColumnGroup() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			if (org.jsoup.parser.HtmlTreeBuilderState.isWhitespace(t)) { 				tb.insert(t.asCharacter()); 				return true;} 			switch (t.type) { 				case Comment : 					tb.insert(t.asComment()); 					break; 				case Doctype : 					tb.error(this); 					break; 				case StartTag : 					org.jsoup.parser.Token.StartTag startTag = t.asStartTag(); 					java.lang.String name = startTag.name(); 					if (name.equals("html")) 						return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InBody);else if (name.equals("col")) 						tb.insertEmpty(startTag);else 						return anythingElse(t, tb); 					break; 				case EndTag : 					org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 					name = endTag.name(); 					if (name.equals("colgroup")) { 						if (tb.currentElement().nodeName().equals("html")) { 							tb.error(this); 							return false;} else { 							tb.pop(); 							tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else 						return anythingElse(t, tb); 					break; 				case EOF : 					if (tb.currentElement().nodeName().equals("html")) 						return true;else 						return anythingElse(t, tb); 				default : 					return anythingElse(t, tb);} 			return true;} 		private boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) { 			boolean processed = tb.processEndTag("colgroup"); 			if (processed) 				return tb.process(t); 			return true;}}, 	InTableBody() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			switch (t.type) { 				case StartTag : 					org.jsoup.parser.Token.StartTag startTag = t.asStartTag(); 					java.lang.String name = startTag.name(); 					if (name.equals("tr")) { 						tb.clearStackToTableBodyContext(); 						tb.insert(startTag); 						tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow);} else if (org.jsoup.helper.StringUtil.in(name, "th", "td")) { 						tb.error(this); 						tb.processStartTag("tr"); 						return tb.process(startTag);} else if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "tbody", "tfoot", "thead")) { 						return exitTableBody(t, tb);} else 						return anythingElse(t, tb); 					break; 				case EndTag : 					org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 					name = endTag.name(); 					if (org.jsoup.helper.StringUtil.in(name, "tbody", "tfoot", "thead")) { 						if (!tb.inTableScope(name)) { 							tb.error(this); 							return false;} else { 							tb.clearStackToTableBodyContext(); 							tb.pop(); 							tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTable);}} else if (name.equals("table")) { 						return exitTableBody(t, tb);} else if (org.jsoup.helper.StringUtil.in(name, "body", "caption", "col", "colgroup", "html", "td", "th", "tr")) { 						tb.error(this); 						return false;} else 						return anythingElse(t, tb); 					break; 				default : 					return anythingElse(t, tb);} 			return true;} 		private boolean exitTableBody(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			if (!((tb.inTableScope("tbody") || tb.inTableScope("thead")) || tb.inScope("tfoot"))) { 				tb.error(this); 				return false;} 			tb.clearStackToTableBodyContext(); 			tb.processEndTag(tb.currentElement().nodeName()); 			return tb.process(t);} 		private boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);}}, 	InRow() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			if (t.isStartTag()) { 				org.jsoup.parser.Token.StartTag startTag = t.asStartTag(); 				java.lang.String name = startTag.name(); 				if (org.jsoup.helper.StringUtil.in(name, "th", "td")) { 					tb.clearStackToTableRowContext(); 					tb.insert(startTag); 					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InCell); 					tb.insertMarkerToFormattingElements();} else if (org.jsoup.helper.StringUtil.in(name, "caption", "col", "colgroup", "tbody", "tfoot", "thead", "tr")) { 					return handleMissingTr(t, tb);} else { 					return anythingElse(t, tb);}} else if (t.isEndTag()) { 				org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 				java.lang.String name = endTag.name(); 				if (name.equals("tr")) { 					if (!tb.inTableScope(name)) { 						tb.error(this); 						return false;} 					tb.clearStackToTableRowContext(); 					tb.pop(); 					tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InTableBody);} else if (name.equals("table")) { 					return handleMissingTr(t, tb);} else if (org.jsoup.helper.StringUtil.in(name, "tbody", "tfoot", "thead")) { 					if (!tb.inTableScope(name)) { 						tb.error(this); 						return false;} 					tb.processEndTag("tr"); 					return tb.process(t);} else if (org.jsoup.helper.StringUtil.in(name, "body", "caption", "col", "colgroup", "html", "td", "th")) { 					tb.error(this); 					return false;} else { 					return anythingElse(t, tb);}} else { 				return anythingElse(t, tb);} 			return true;} 		private boolean anythingElse(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			return tb.process(t, org.jsoup.parser.HtmlTreeBuilderState.InTable);} 		private boolean handleMissingTr(org.jsoup.parser.Token t, org.jsoup.parser.TreeBuilder tb) { 			boolean processed = tb.processEndTag("tr"); 			if (processed) 				return tb.process(t);else 				return false;}}, 	InCell() { 		boolean process(org.jsoup.parser.Token t, org.jsoup.parser.HtmlTreeBuilder tb) { 			if (t.isEndTag()) { 				org.jsoup.parser.Token.EndTag endTag = t.asEndTag(); 				java.lang.String name = endTag.name(); 				if (org.jsoup.helper.StringUtil.in(name, "td", "th")) { 					if (!tb.inTableScope(name)) { 						tb.error(this); 						tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InRow); 						return false;}

