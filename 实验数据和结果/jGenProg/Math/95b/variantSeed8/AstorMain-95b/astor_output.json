{"general":{"NR_RIGHT_COMPILATIONS":65,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":70,"NR_GENERATIONS":135,"TOTAL_TIME":636.013,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"270","VALIDATION":"|true|0|1304|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.distribution.FDistributionImpl","PATH":"\\\/home\\\/rtx\\\/repair\\\/d4j\\\/Math\\\/95b\\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/distribution\\\/FDistributionImpl.java","INGREDIENT_SCOPE":"PACKAGE","SUSPICIOUNESS":"0.258","INGREDIENT_PARENT":"return java.lang.Double.MIN_VALUE","PATCH_HUNK_TYPE":"CtReturnImpl|CtBlockImpl","ORIGINAL_CODE":"return ret","BUGGY_CODE_TYPE":"CtReturnImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/home\\\/rtx\\\/repair\\\/d4j\\\/Math\\\/95b\\\/jgenprog\\\/variantSeed8\\\/AstorMain-95b\\\/\\\/src\\\/\\\/variant-270\\\/org\\\/apache\\\/commons\\\/math\\\/distribution\\\/FDistributionImpl.java","LINE":"148","MP_RANKING":"5","PATCH_HUNK_CODE":"return java.lang.Double.MIN_VALUE"}],"TIME":"636","GENERATION":"135","FOLDER_SOLUTION_CODE":"\\\/home\\\/rtx\\\/repair\\\/d4j\\\/Math\\\/95b\\\/jgenprog\\\/variantSeed8\\\/AstorMain-95b\\\/\\\/src\\\/\\\/variant-270","PATCH_DIFF_ORIG":"--- \\\/home\\\/rtx\\\/repair\\\/d4j\\\/Math\\\/95b\\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/distribution\\\/FDistributionImpl.java\\n+++ \\\/home\\\/rtx\\\/repair\\\/d4j\\\/Math\\\/95b\\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/distribution\\\/FDistributionImpl.java\\n@@ -148,2 +147,0 @@\\n-\\t\\treturn ret;\\n-\\t}\\n@@ -157,7 +154,0 @@\\n-\\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {\\n-\\t\\tif (degreesOfFreedom <= 0.0) {\\n-\\t\\t\\tthrow new java.lang.IllegalArgumentException(\\n-\\t\\t\\t\\\"degrees of freedom must be positive.\\\");\\n-\\t\\t}\\n-\\t\\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;\\n-\\t}\\n@@ -167,0 +159,9 @@\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\treturn java.lang.Double.MIN_VALUE;} \\tpublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { \\t\\tif (degreesOfFreedom <= 0.0) { \\t\\t\\tthrow new java.lang.IllegalArgumentException(\\\"degrees of freedom must be positive.\\\");} \\t\\tthis.numeratorDegreesOfFreedom = degreesOfFreedom;}\\n\\n"}]}