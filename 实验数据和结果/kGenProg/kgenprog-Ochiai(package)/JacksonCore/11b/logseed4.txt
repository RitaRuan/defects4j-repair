RUNNING THE BUG: JacksonCore 11, WITH THE SEED: 4
2021-02-08 13:34:59 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = kgenprog.toml
rootDir = . (set by command line)
productPaths = [src/main/java] (set by command line)
testPaths = [src/test/java] (set by command line)
classPaths = [/home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/junit/junit/4.8.2/junit-4.8.2.jar, /home/rtx/repair/defects4j/framework/projects/lib/junit-4.11.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/junit/junit/4.11/junit-4.11.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/junit/junit/4.12/junit-4.12.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/lib/junit/junit/4.11/junit-4.11.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/lib/junit/junit/4.12/junit-4.12.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/lib/junit/junit/4.8.2/junit-4.8.2.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/lib/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, /home/rtx/repair/defects4j/framework/projects/JacksonCore/lib/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar] (set by command line)
executionTests = [com.fasterxml.jackson.core.sym.SymbolsViaParserTest] (set by command line)
outDir = ./patch4 (set by command line)
logLevel = INFO
mutationGeneratingCount = 10
crossoverGeneratingCount = 10
headcount = 10
maxGeneration = 10
timeLimit = PT1M
testTimeLimit = PT10S
requiredSolutionsCount = 1
randomSeed = 4 (set by command line)
scope = PACKAGE
faultLocalization = Ochiai
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true
isHistoryRecord = false
currentDirectory = /home/rtx/repair/d4j/JacksonCore/11b
version = 1.8.0
================================================================
2021-02-08 13:35:08 [main] [INFO]  KGenProgMain - initial failed tests (1/4)
com.fasterxml.jackson.core.sym.SymbolsViaParserTest.testSymbolTableExpansionBytes: null
2021-02-08 13:35:08 [main] [INFO]  KGenProgMain - GA started
2021-02-08 13:35:08 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2021-02-08 13:35:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 10, build-succeeded 2, build-failed 4, syntax-invalid 2, redundant 2
Fitness: max 0.75(2), min 0.75(2), ave 0.75
----------------------------------------------------------------

2021-02-08 13:35:10 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2021-02-08 13:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 8, build-succeeded 2, build-failed 5, syntax-invalid 0, redundant 1
Fitness: max 1(1), min 0.75(1), ave 0.875
----------------------------------------------------------------

2021-02-08 13:35:12 [main] [INFO]  KGenProgMain - GA stopped
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
+++ com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
@@ -929,7 +929,8 @@
         final int end = (_hashSize << 3);
         if (_spilloverEnd >= end) {
             if (_failOnDoS) {
-                _reportTooManyCollisions();
+                _hashShared = true;
+				_reportTooManyCollisions();
             }
             // and if we didn't fail, we'll simply force rehash for next add
             // (which, in turn, may double up or nuke contents, depending on size etc)
@@ -980,12 +981,6 @@
     public int calcHash(int q1)
     {
         int hash = q1 ^ _seed;
-        /* 29-Mar-2015, tatu: Earlier used 15 + 9 right shifts, which worked ok
-         *    except for one specific problem case: numbers. So needed to make sure
-         *    that all 4 least-significant bits participate in hash. Couple of ways
-         *    to work it out, but this is the simplest, fast and seems to do ok.
-         */
-        hash += (hash >>> 16); // to xor hi- and low- 16-bits
         hash ^= (hash << 3); // shuffle back a bit
         hash += (hash >>> 12); // and bit more
         return hash;
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.io.CharTypes
+++ com.fasterxml.jackson.core.io.CharTypes
@@ -256,4 +256,3 @@
         return (byte[]) HB.clone();
     }
 }
-
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.Base64Variant
+++ com.fasterxml.jackson.core.Base64Variant
@@ -590,4 +590,3 @@
         throw new IllegalArgumentException("Unexpected end-of-String in base64 content");
     }
 }
-
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.util.ByteArrayBuilder
+++ com.fasterxml.jackson.core.util.ByteArrayBuilder
@@ -241,4 +241,3 @@
     }
 
 }
-
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.PrettyPrinter
+++ com.fasterxml.jackson.core.PrettyPrinter
@@ -174,4 +174,3 @@
     void beforeObjectEntries(JsonGenerator gen)
         throws IOException, JsonGenerationException;
 }
-
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.type.TypeReference
+++ com.fasterxml.jackson.core.type.TypeReference
@@ -55,4 +55,3 @@
     public int compareTo(TypeReference<T> o) { return 0; }
     // just need an implementation, not a good one... hence ^^^
 }
-
2021-02-08 13:35:12 [main] [INFO]  PatchLogExporter - patch (v18)
--- com.fasterxml.jackson.core.util.InternCache
+++ com.fasterxml.jackson.core.util.InternCache
@@ -61,4 +61,3 @@
         return result;
     }
 }
-
2021-02-08 13:35:12 [main] [INFO]  KGenProgMain - Summary
Reached generation = 2
Generated variants = 18
Syntax valid variants = 16
Build succeeded variants = 4
Time elapsed = 4 seconds
Exit status = SUCCESS
